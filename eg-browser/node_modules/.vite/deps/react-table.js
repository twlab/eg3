import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  require_react
} from "./chunk-HXJCLAX7.js";
import {
  __commonJS,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-HG6TCYAD.js";

// node_modules/react-table/dist/react-table.production.min.js
var require_react_table_production_min = __commonJS({
  "node_modules/react-table/dist/react-table.production.min.js"(exports, module) {
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    !function(e, t) {
      "object" == typeof exports && "undefined" != typeof module ? t(exports, require_react()) : "function" == typeof define && define.amd ? define(["exports", "react"], t) : t((e = e || self).ReactTable = {}, e.React);
    }(exports, function(e, t) {
      "use strict";
      function n(e2, t2, n2, o2, r2, i2, u2) {
        try {
          var l2 = e2[i2](u2), s2 = l2.value;
        } catch (e3) {
          return void n2(e3);
        }
        l2.done ? t2(s2) : Promise.resolve(s2).then(o2, r2);
      }
      function o(e2) {
        return function() {
          var t2 = this, o2 = arguments;
          return new Promise(function(r2, i2) {
            var u2 = e2.apply(t2, o2);
            function l2(e3) {
              n(u2, r2, i2, l2, s2, "next", e3);
            }
            function s2(e3) {
              n(u2, r2, i2, l2, s2, "throw", e3);
            }
            l2(void 0);
          });
        };
      }
      function r() {
        return (r = Object.assign || function(e2) {
          for (var t2 = 1; t2 < arguments.length; t2++) {
            var n2 = arguments[t2];
            for (var o2 in n2) Object.prototype.hasOwnProperty.call(n2, o2) && (e2[o2] = n2[o2]);
          }
          return e2;
        }).apply(this, arguments);
      }
      function i(e2, t2) {
        if (null == e2) return {};
        var n2, o2, r2 = {}, i2 = Object.keys(e2);
        for (o2 = 0; o2 < i2.length; o2++) n2 = i2[o2], t2.indexOf(n2) >= 0 || (r2[n2] = e2[n2]);
        return r2;
      }
      function u(e2) {
        var t2 = function(e3, t3) {
          if ("object" != typeof e3 || null === e3) return e3;
          var n2 = e3[Symbol.toPrimitive];
          if (void 0 !== n2) {
            var o2 = n2.call(e3, t3 || "default");
            if ("object" != typeof o2) return o2;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return ("string" === t3 ? String : Number)(e3);
        }(e2, "string");
        return "symbol" == typeof t2 ? t2 : String(t2);
      }
      t = t && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
      var l = { init: "init" }, s = function(e2) {
        var t2 = e2.value;
        return void 0 === t2 ? "" : t2;
      }, a = function() {
        return t.createElement(t.Fragment, null, " ");
      }, c = { Cell: s, width: 150, minWidth: 0, maxWidth: Number.MAX_SAFE_INTEGER };
      function d() {
        for (var e2 = arguments.length, t2 = new Array(e2), n2 = 0; n2 < e2; n2++) t2[n2] = arguments[n2];
        return t2.reduce(function(e3, t3) {
          var n3 = t3.style, o2 = t3.className;
          return e3 = r({}, e3, {}, i(t3, ["style", "className"])), n3 && (e3.style = e3.style ? r({}, e3.style || {}, {}, n3 || {}) : n3), o2 && (e3.className = e3.className ? e3.className + " " + o2 : o2), "" === e3.className && delete e3.className, e3;
        }, {});
      }
      var f = function(e2, t2) {
        return void 0 === t2 && (t2 = {}), function(n2) {
          return void 0 === n2 && (n2 = {}), [].concat(e2, [n2]).reduce(function(e3, o2) {
            return function e4(t3, n3, o3) {
              return "function" == typeof n3 ? e4({}, n3(t3, o3)) : Array.isArray(n3) ? d.apply(void 0, [t3].concat(n3)) : d(t3, n3);
            }(e3, o2, r({}, t2, { userProps: n2 }));
          }, {});
        };
      }, p = function(e2, t2, n2, o2) {
        return void 0 === n2 && (n2 = {}), e2.reduce(function(e3, t3) {
          return t3(e3, n2);
        }, t2);
      }, g = function(e2, t2, n2) {
        return void 0 === n2 && (n2 = {}), e2.forEach(function(e3) {
          e3(t2, n2);
        });
      };
      function v(e2, t2, n2, o2) {
        e2.findIndex(function(e3) {
          return e3.pluginName === n2;
        });
        t2.forEach(function(t3) {
          e2.findIndex(function(e3) {
            return e3.pluginName === t3;
          });
        });
      }
      function m(e2, t2) {
        return "function" == typeof e2 ? e2(t2) : e2;
      }
      function h(e2) {
        var n2 = t.useRef();
        return n2.current = e2, t.useCallback(function() {
          return n2.current;
        }, []);
      }
      var y = "undefined" != typeof document ? t.useLayoutEffect : t.useEffect;
      function w(e2, n2) {
        var o2 = t.useRef(false);
        y(function() {
          o2.current && e2(), o2.current = true;
        }, n2);
      }
      function R(e2, t2, n2) {
        return void 0 === n2 && (n2 = {}), function(o2, i2) {
          void 0 === i2 && (i2 = {});
          var u2 = "string" == typeof o2 ? t2[o2] : o2;
          if (void 0 === u2) throw console.info(t2), new Error("Renderer Error ☝️");
          return b(u2, r({}, e2, { column: t2 }, n2, {}, i2));
        };
      }
      function b(e2, n2) {
        return function(e3) {
          return "function" == typeof e3 && ((t2 = Object.getPrototypeOf(e3)).prototype && t2.prototype.isReactComponent);
          var t2;
        }(o2 = e2) || "function" == typeof o2 || function(e3) {
          return "object" == typeof e3 && "symbol" == typeof e3.$$typeof && ["react.memo", "react.forward_ref"].includes(e3.$$typeof.description);
        }(o2) ? t.createElement(e2, n2) : e2;
        var o2;
      }
      function S(e2, t2, n2) {
        return void 0 === n2 && (n2 = 0), e2.map(function(e3) {
          return x(e3 = r({}, e3, { parent: t2, depth: n2 })), e3.columns && (e3.columns = S(e3.columns, e3, n2 + 1)), e3;
        });
      }
      function C(e2) {
        return G(e2, "columns");
      }
      function x(e2) {
        var t2 = e2.id, n2 = e2.accessor, o2 = e2.Header;
        if ("string" == typeof n2) {
          t2 = t2 || n2;
          var r2 = n2.split(".");
          n2 = function(e3) {
            return function(e4, t3, n3) {
              if (!t3) return e4;
              var o3, r3 = "function" == typeof t3 ? t3 : JSON.stringify(t3), i2 = E.get(r3) || function() {
                var e5 = function(e6) {
                  return function e7(t4, n4) {
                    void 0 === n4 && (n4 = []);
                    if (Array.isArray(t4)) for (var o4 = 0; o4 < t4.length; o4 += 1) e7(t4[o4], n4);
                    else n4.push(t4);
                    return n4;
                  }(e6).map(function(e7) {
                    return String(e7).replace(".", "_");
                  }).join(".").replace(T, ".").replace(O, "").split(".");
                }(t3);
                return E.set(r3, e5), e5;
              }();
              try {
                o3 = i2.reduce(function(e5, t4) {
                  return e5[t4];
                }, e4);
              } catch (e5) {
              }
              return void 0 !== o3 ? o3 : n3;
            }(e3, r2);
          };
        }
        if (!t2 && "string" == typeof o2 && o2 && (t2 = o2), !t2 && e2.columns) throw console.error(e2), new Error('A column ID (or unique "Header" value) is required!');
        if (!t2) throw console.error(e2), new Error("A column ID (or string accessor) is required!");
        return Object.assign(e2, { id: t2, accessor: n2 }), e2;
      }
      function P(e2, t2) {
        if (!t2) throw new Error();
        return Object.assign(e2, r({ Header: a, Footer: a }, c, {}, t2, {}, e2)), Object.assign(e2, { originalWidth: e2.width }), e2;
      }
      function B(e2, t2, n2) {
        void 0 === n2 && (n2 = function() {
          return {};
        });
        for (var o2 = [], i2 = e2, u2 = 0, l2 = function() {
          return u2++;
        }, s2 = function() {
          var e3 = { headers: [] }, u3 = [], s3 = i2.some(function(e4) {
            return e4.parent;
          });
          i2.forEach(function(o3) {
            var i3, a2 = [].concat(u3).reverse()[0];
            if (s3) {
              if (o3.parent) i3 = r({}, o3.parent, { originalId: o3.parent.id, id: o3.parent.id + "_" + l2(), headers: [o3] }, n2(o3));
              else i3 = P(r({ originalId: o3.id + "_placeholder", id: o3.id + "_placeholder_" + l2(), placeholderOf: o3, headers: [o3] }, n2(o3)), t2);
              a2 && a2.originalId === i3.originalId ? a2.headers.push(o3) : u3.push(i3);
            }
            e3.headers.push(o3);
          }), o2.push(e3), i2 = u3;
        }; i2.length; ) s2();
        return o2.reverse();
      }
      var E = /* @__PURE__ */ new Map();
      function I() {
        for (var e2 = arguments.length, t2 = new Array(e2), n2 = 0; n2 < e2; n2++) t2[n2] = arguments[n2];
        for (var o2 = 0; o2 < t2.length; o2 += 1) if (void 0 !== t2[o2]) return t2[o2];
      }
      function F(e2) {
        if ("function" == typeof e2) return e2;
      }
      function G(e2, t2) {
        var n2 = [];
        return function e3(o2) {
          o2.forEach(function(o3) {
            o3[t2] ? e3(o3[t2]) : n2.push(o3);
          });
        }(e2), n2;
      }
      function A(e2, t2) {
        var n2 = t2.manualExpandedKey, o2 = t2.expanded, r2 = t2.expandSubRows, i2 = void 0 === r2 || r2, u2 = [];
        return e2.forEach(function(e3) {
          return function e4(t3, r3) {
            void 0 === r3 && (r3 = true), t3.isExpanded = t3.original && t3.original[n2] || o2[t3.id], t3.canExpand = t3.subRows && !!t3.subRows.length, r3 && u2.push(t3), t3.subRows && t3.subRows.length && t3.isExpanded && t3.subRows.forEach(function(t4) {
              return e4(t4, i2);
            });
          }(e3);
        }), u2;
      }
      function k(e2, t2, n2) {
        return F(e2) || t2[e2] || n2[e2] || n2.text;
      }
      function H(e2, t2, n2) {
        return e2 ? e2(t2, n2) : void 0 === t2;
      }
      function W() {
        throw new Error("React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.");
      }
      var z = null;
      var T = /\[/g, O = /\]/g;
      var M = function(e2) {
        return r({ role: "table" }, e2);
      }, j = function(e2) {
        return r({ role: "rowgroup" }, e2);
      }, L = function(e2, t2) {
        var n2 = t2.column;
        return r({ key: "header_" + n2.id, colSpan: n2.totalVisibleHeaderCount, role: "columnheader" }, e2);
      }, N = function(e2, t2) {
        var n2 = t2.column;
        return r({ key: "footer_" + n2.id, colSpan: n2.totalVisibleHeaderCount }, e2);
      }, D = function(e2, t2) {
        return r({ key: "headerGroup_" + t2.index, role: "row" }, e2);
      }, V = function(e2, t2) {
        return r({ key: "footerGroup_" + t2.index }, e2);
      }, _ = function(e2, t2) {
        return r({ key: "row_" + t2.row.id, role: "row" }, e2);
      }, X = function(e2, t2) {
        var n2 = t2.cell;
        return r({ key: "cell_" + n2.row.id + "_" + n2.column.id, role: "cell" }, e2);
      };
      function q() {
        return { useOptions: [], stateReducers: [], useControlledState: [], columns: [], columnsDeps: [], allColumns: [], allColumnsDeps: [], accessValue: [], materializedColumns: [], materializedColumnsDeps: [], useInstanceAfterData: [], visibleColumns: [], visibleColumnsDeps: [], headerGroups: [], headerGroupsDeps: [], useInstanceBeforeDimensions: [], useInstance: [], prepareRow: [], getTableProps: [M], getTableBodyProps: [j], getHeaderGroupProps: [D], getFooterGroupProps: [V], getHeaderProps: [L], getFooterProps: [N], getRowProps: [_], getCellProps: [X], useFinalInstance: [] };
      }
      l.resetHiddenColumns = "resetHiddenColumns", l.toggleHideColumn = "toggleHideColumn", l.setHiddenColumns = "setHiddenColumns", l.toggleHideAllColumns = "toggleHideAllColumns";
      var K = function(e2) {
        e2.getToggleHiddenProps = [U], e2.getToggleHideAllColumnsProps = [$], e2.stateReducers.push(J), e2.useInstanceBeforeDimensions.push(Y), e2.headerGroupsDeps.push(function(e3, t2) {
          var n2 = t2.instance;
          return [].concat(e3, [n2.state.hiddenColumns]);
        }), e2.useInstance.push(Q);
      };
      K.pluginName = "useColumnVisibility";
      var U = function(e2, t2) {
        var n2 = t2.column;
        return [e2, { onChange: function(e3) {
          n2.toggleHidden(!e3.target.checked);
        }, style: { cursor: "pointer" }, checked: n2.isVisible, title: "Toggle Column Visible" }];
      }, $ = function(e2, t2) {
        var n2 = t2.instance;
        return [e2, { onChange: function(e3) {
          n2.toggleHideAllColumns(!e3.target.checked);
        }, style: { cursor: "pointer" }, checked: !n2.allColumnsHidden && !n2.state.hiddenColumns.length, title: "Toggle All Columns Hidden", indeterminate: !n2.allColumnsHidden && n2.state.hiddenColumns.length }];
      };
      function J(e2, t2, n2, o2) {
        if (t2.type === l.init) return r({ hiddenColumns: [] }, e2);
        if (t2.type === l.resetHiddenColumns) return r({}, e2, { hiddenColumns: o2.initialState.hiddenColumns || [] });
        if (t2.type === l.toggleHideColumn) {
          var i2 = (void 0 !== t2.value ? t2.value : !e2.hiddenColumns.includes(t2.columnId)) ? [].concat(e2.hiddenColumns, [t2.columnId]) : e2.hiddenColumns.filter(function(e3) {
            return e3 !== t2.columnId;
          });
          return r({}, e2, { hiddenColumns: i2 });
        }
        return t2.type === l.setHiddenColumns ? r({}, e2, { hiddenColumns: m(t2.value, e2.hiddenColumns) }) : t2.type === l.toggleHideAllColumns ? r({}, e2, { hiddenColumns: (void 0 !== t2.value ? t2.value : !e2.hiddenColumns.length) ? o2.allColumns.map(function(e3) {
          return e3.id;
        }) : [] }) : void 0;
      }
      function Y(e2) {
        var n2 = e2.headers, o2 = e2.state.hiddenColumns;
        t.useRef(false).current;
        var r2 = 0;
        n2.forEach(function(e3) {
          return r2 += function e4(t2, n3) {
            t2.isVisible = n3 && !o2.includes(t2.id);
            var r3 = 0;
            return t2.headers && t2.headers.length ? t2.headers.forEach(function(n4) {
              return r3 += e4(n4, t2.isVisible);
            }) : r3 = t2.isVisible ? 1 : 0, t2.totalVisibleHeaderCount = r3, r3;
          }(e3, true);
        });
      }
      function Q(e2) {
        var n2 = e2.columns, o2 = e2.flatHeaders, r2 = e2.dispatch, i2 = e2.allColumns, u2 = e2.getHooks, s2 = e2.state.hiddenColumns, a2 = e2.autoResetHiddenColumns, c2 = void 0 === a2 || a2, d2 = h(e2), p2 = i2.length === s2.length, g2 = t.useCallback(function(e3, t2) {
          return r2({ type: l.toggleHideColumn, columnId: e3, value: t2 });
        }, [r2]), v2 = t.useCallback(function(e3) {
          return r2({ type: l.setHiddenColumns, value: e3 });
        }, [r2]), m2 = t.useCallback(function(e3) {
          return r2({ type: l.toggleHideAllColumns, value: e3 });
        }, [r2]), y2 = f(u2().getToggleHideAllColumnsProps, { instance: d2() });
        o2.forEach(function(e3) {
          e3.toggleHidden = function(t2) {
            r2({ type: l.toggleHideColumn, columnId: e3.id, value: t2 });
          }, e3.getToggleHiddenProps = f(u2().getToggleHiddenProps, { instance: d2(), column: e3 });
        });
        var R2 = h(c2);
        w(function() {
          R2() && r2({ type: l.resetHiddenColumns });
        }, [r2, n2]), Object.assign(e2, { allColumnsHidden: p2, toggleHideColumn: g2, setHiddenColumns: v2, toggleHideAllColumns: m2, getToggleHideAllColumnsProps: y2 });
      }
      var Z = {}, ee = {}, te = function(e2, t2, n2) {
        return e2;
      }, ne = function(e2, t2) {
        return e2.subRows || [];
      }, oe = function(e2, t2, n2) {
        return "" + (n2 ? [n2.id, t2].join(".") : t2);
      }, re = function(e2) {
        return e2;
      };
      function ie(e2) {
        var t2 = e2.initialState, n2 = void 0 === t2 ? Z : t2, o2 = e2.defaultColumn, u2 = void 0 === o2 ? ee : o2, l2 = e2.getSubRows, s2 = void 0 === l2 ? ne : l2, a2 = e2.getRowId, c2 = void 0 === a2 ? oe : a2, d2 = e2.stateReducer, f2 = void 0 === d2 ? te : d2, p2 = e2.useControlledState, g2 = void 0 === p2 ? re : p2;
        return r({}, i(e2, ["initialState", "defaultColumn", "getSubRows", "getRowId", "stateReducer", "useControlledState"]), { initialState: n2, defaultColumn: u2, getSubRows: s2, getRowId: c2, stateReducer: f2, useControlledState: g2 });
      }
      function ue(e2, t2) {
        void 0 === t2 && (t2 = 0);
        var n2 = 0, o2 = 0, r2 = 0, i2 = 0;
        return e2.forEach(function(e3) {
          var u2 = e3.headers;
          if (e3.totalLeft = t2, u2 && u2.length) {
            var l2 = ue(u2, t2), s2 = l2[0], a2 = l2[1], c2 = l2[2], d2 = l2[3];
            e3.totalMinWidth = s2, e3.totalWidth = a2, e3.totalMaxWidth = c2, e3.totalFlexWidth = d2;
          } else e3.totalMinWidth = e3.minWidth, e3.totalWidth = Math.min(Math.max(e3.minWidth, e3.width), e3.maxWidth), e3.totalMaxWidth = e3.maxWidth, e3.totalFlexWidth = e3.canResize ? e3.totalWidth : 0;
          e3.isVisible && (t2 += e3.totalWidth, n2 += e3.totalMinWidth, o2 += e3.totalWidth, r2 += e3.totalMaxWidth, i2 += e3.totalFlexWidth);
        }), [n2, o2, r2, i2];
      }
      function le(e2) {
        var t2 = e2.data, n2 = e2.rows, o2 = e2.flatRows, r2 = e2.rowsById, i2 = e2.column, u2 = e2.getRowId, l2 = e2.getSubRows, s2 = e2.accessValueHooks, a2 = e2.getInstance;
        t2.forEach(function(e3, c2) {
          return function e4(n3, c3, d2, f2, g2) {
            void 0 === d2 && (d2 = 0);
            var v2 = n3, m2 = u2(n3, c3, f2), h2 = r2[m2];
            if (h2) h2.subRows && h2.originalSubRows.forEach(function(t3, n4) {
              return e4(t3, n4, d2 + 1, h2);
            });
            else if ((h2 = { id: m2, original: v2, index: c3, depth: d2, cells: [{}] }).cells.map = W, h2.cells.filter = W, h2.cells.forEach = W, h2.cells[0].getCellProps = W, h2.values = {}, g2.push(h2), o2.push(h2), r2[m2] = h2, h2.originalSubRows = l2(n3, c3), h2.originalSubRows) {
              var y2 = [];
              h2.originalSubRows.forEach(function(t3, n4) {
                return e4(t3, n4, d2 + 1, h2, y2);
              }), h2.subRows = y2;
            }
            i2.accessor && (h2.values[i2.id] = i2.accessor(n3, c3, h2, g2, t2)), h2.values[i2.id] = p(s2, h2.values[i2.id], { row: h2, column: i2, instance: a2() });
          }(e3, c2, 0, void 0, n2);
        });
      }
      l.resetExpanded = "resetExpanded", l.toggleRowExpanded = "toggleRowExpanded", l.toggleAllRowsExpanded = "toggleAllRowsExpanded";
      var se = function(e2) {
        e2.getToggleAllRowsExpandedProps = [ae], e2.getToggleRowExpandedProps = [ce], e2.stateReducers.push(de), e2.useInstance.push(fe), e2.prepareRow.push(pe);
      };
      se.pluginName = "useExpanded";
      var ae = function(e2, t2) {
        var n2 = t2.instance;
        return [e2, { onClick: function(e3) {
          n2.toggleAllRowsExpanded();
        }, style: { cursor: "pointer" }, title: "Toggle All Rows Expanded" }];
      }, ce = function(e2, t2) {
        var n2 = t2.row;
        return [e2, { onClick: function() {
          n2.toggleRowExpanded();
        }, style: { cursor: "pointer" }, title: "Toggle Row Expanded" }];
      };
      function de(e2, t2, n2, o2) {
        if (t2.type === l.init) return r({ expanded: {} }, e2);
        if (t2.type === l.resetExpanded) return r({}, e2, { expanded: o2.initialState.expanded || {} });
        if (t2.type === l.toggleAllRowsExpanded) {
          var s2 = t2.value, a2 = o2.rowsById, c2 = Object.keys(a2).length === Object.keys(e2.expanded).length;
          if (void 0 !== s2 ? s2 : !c2) {
            var d2 = {};
            return Object.keys(a2).forEach(function(e3) {
              d2[e3] = true;
            }), r({}, e2, { expanded: d2 });
          }
          return r({}, e2, { expanded: {} });
        }
        if (t2.type === l.toggleRowExpanded) {
          var f2, p2 = t2.id, g2 = t2.value, v2 = e2.expanded[p2], m2 = void 0 !== g2 ? g2 : !v2;
          if (!v2 && m2) return r({}, e2, { expanded: r({}, e2.expanded, (f2 = {}, f2[p2] = true, f2)) });
          if (v2 && !m2) {
            var h2 = e2.expanded;
            h2[p2];
            return r({}, e2, { expanded: i(h2, [p2].map(u)) });
          }
          return e2;
        }
      }
      function fe(e2) {
        var n2 = e2.data, o2 = e2.rows, r2 = e2.rowsById, i2 = e2.manualExpandedKey, u2 = void 0 === i2 ? "expanded" : i2, s2 = e2.paginateExpandedRows, a2 = void 0 === s2 || s2, c2 = e2.expandSubRows, d2 = void 0 === c2 || c2, p2 = e2.autoResetExpanded, g2 = void 0 === p2 || p2, m2 = e2.getHooks, y2 = e2.plugins, R2 = e2.state.expanded, b2 = e2.dispatch;
        v(y2, ["useSortBy", "useGroupBy", "usePivotColumns", "useGlobalFilter"], "useExpanded");
        var S2 = h(g2), C2 = Boolean(Object.keys(r2).length && Object.keys(R2).length);
        C2 && Object.keys(r2).some(function(e3) {
          return !R2[e3];
        }) && (C2 = false), w(function() {
          S2() && b2({ type: l.resetExpanded });
        }, [b2, n2]);
        var x2 = t.useCallback(function(e3, t2) {
          b2({ type: l.toggleRowExpanded, id: e3, value: t2 });
        }, [b2]), P2 = t.useCallback(function(e3) {
          return b2({ type: l.toggleAllRowsExpanded, value: e3 });
        }, [b2]), B2 = t.useMemo(function() {
          return a2 ? A(o2, { manualExpandedKey: u2, expanded: R2, expandSubRows: d2 }) : o2;
        }, [a2, o2, u2, R2, d2]), E2 = t.useMemo(function() {
          return function(e3) {
            var t2 = 0;
            return Object.keys(e3).forEach(function(e4) {
              var n3 = e4.split(".");
              t2 = Math.max(t2, n3.length);
            }), t2;
          }(R2);
        }, [R2]), I2 = h(e2), F2 = f(m2().getToggleAllRowsExpandedProps, { instance: I2() });
        Object.assign(e2, { preExpandedRows: o2, expandedRows: B2, rows: B2, expandedDepth: E2, isAllRowsExpanded: C2, toggleRowExpanded: x2, toggleAllRowsExpanded: P2, getToggleAllRowsExpandedProps: F2 });
      }
      function pe(e2, t2) {
        var n2 = t2.instance.getHooks, o2 = t2.instance;
        e2.toggleRowExpanded = function(t3) {
          return o2.toggleRowExpanded(e2.id, t3);
        }, e2.getToggleRowExpandedProps = f(n2().getToggleRowExpandedProps, { instance: o2, row: e2 });
      }
      var ge = function(e2, t2, n2) {
        return e2 = e2.filter(function(e3) {
          return t2.some(function(t3) {
            var o2 = e3.values[t3];
            return String(o2).toLowerCase().includes(String(n2).toLowerCase());
          });
        });
      };
      ge.autoRemove = function(e2) {
        return !e2;
      };
      var ve = function(e2, t2, n2) {
        return e2.filter(function(e3) {
          return t2.some(function(t3) {
            var o2 = e3.values[t3];
            return void 0 === o2 || String(o2).toLowerCase() === String(n2).toLowerCase();
          });
        });
      };
      ve.autoRemove = function(e2) {
        return !e2;
      };
      var me = function(e2, t2, n2) {
        return e2.filter(function(e3) {
          return t2.some(function(t3) {
            var o2 = e3.values[t3];
            return void 0 === o2 || String(o2) === String(n2);
          });
        });
      };
      me.autoRemove = function(e2) {
        return !e2;
      };
      var he = function(e2, t2, n2) {
        return e2.filter(function(e3) {
          return t2.some(function(t3) {
            return e3.values[t3].includes(n2);
          });
        });
      };
      he.autoRemove = function(e2) {
        return !e2 || !e2.length;
      };
      var ye = function(e2, t2, n2) {
        return e2.filter(function(e3) {
          return t2.some(function(t3) {
            var o2 = e3.values[t3];
            return o2 && o2.length && n2.every(function(e4) {
              return o2.includes(e4);
            });
          });
        });
      };
      ye.autoRemove = function(e2) {
        return !e2 || !e2.length;
      };
      var we = function(e2, t2, n2) {
        return e2.filter(function(e3) {
          return t2.some(function(t3) {
            var o2 = e3.values[t3];
            return o2 && o2.length && n2.some(function(e4) {
              return o2.includes(e4);
            });
          });
        });
      };
      we.autoRemove = function(e2) {
        return !e2 || !e2.length;
      };
      var Re = function(e2, t2, n2) {
        return e2.filter(function(e3) {
          return t2.some(function(t3) {
            var o2 = e3.values[t3];
            return n2.includes(o2);
          });
        });
      };
      Re.autoRemove = function(e2) {
        return !e2 || !e2.length;
      };
      var be = function(e2, t2, n2) {
        return e2.filter(function(e3) {
          return t2.some(function(t3) {
            return e3.values[t3] === n2;
          });
        });
      };
      be.autoRemove = function(e2) {
        return void 0 === e2;
      };
      var Se = function(e2, t2, n2) {
        return e2.filter(function(e3) {
          return t2.some(function(t3) {
            return e3.values[t3] == n2;
          });
        });
      };
      Se.autoRemove = function(e2) {
        return null == e2;
      };
      var Ce = function(e2, t2, n2) {
        var o2 = n2 || [], r2 = o2[0], i2 = o2[1];
        if ((r2 = "number" == typeof r2 ? r2 : -1 / 0) > (i2 = "number" == typeof i2 ? i2 : 1 / 0)) {
          var u2 = r2;
          r2 = i2, i2 = u2;
        }
        return e2.filter(function(e3) {
          return t2.some(function(t3) {
            var n3 = e3.values[t3];
            return n3 >= r2 && n3 <= i2;
          });
        });
      };
      Ce.autoRemove = function(e2) {
        return !e2 || "number" != typeof e2[0] && "number" != typeof e2[1];
      };
      var xe = Object.freeze({ __proto__: null, text: ge, exactText: ve, exactTextCase: me, includes: he, includesAll: ye, includesSome: we, includesValue: Re, exact: be, equals: Se, between: Ce });
      l.resetFilters = "resetFilters", l.setFilter = "setFilter", l.setAllFilters = "setAllFilters";
      var Pe = function(e2) {
        e2.stateReducers.push(Be), e2.useInstance.push(Ee);
      };
      function Be(e2, t2, n2, o2) {
        if (t2.type === l.init) return r({ filters: [] }, e2);
        if (t2.type === l.resetFilters) return r({}, e2, { filters: o2.initialState.filters || [] });
        if (t2.type === l.setFilter) {
          var i2 = t2.columnId, u2 = t2.filterValue, s2 = o2.allColumns, a2 = o2.filterTypes, c2 = s2.find(function(e3) {
            return e3.id === i2;
          });
          if (!c2) throw new Error("React-Table: Could not find a column with id: " + i2);
          var d2 = k(c2.filter, a2 || {}, xe), f2 = e2.filters.find(function(e3) {
            return e3.id === i2;
          }), p2 = m(u2, f2 && f2.value);
          return H(d2.autoRemove, p2, c2) ? r({}, e2, { filters: e2.filters.filter(function(e3) {
            return e3.id !== i2;
          }) }) : r({}, e2, f2 ? { filters: e2.filters.map(function(e3) {
            return e3.id === i2 ? { id: i2, value: p2 } : e3;
          }) } : { filters: [].concat(e2.filters, [{ id: i2, value: p2 }]) });
        }
        if (t2.type === l.setAllFilters) {
          var g2 = t2.filters, v2 = o2.allColumns, h2 = o2.filterTypes;
          return r({}, e2, { filters: m(g2, e2.filters).filter(function(e3) {
            var t3 = v2.find(function(t4) {
              return t4.id === e3.id;
            });
            return !H(k(t3.filter, h2 || {}, xe).autoRemove, e3.value, t3);
          }) });
        }
      }
      function Ee(e2) {
        var n2 = e2.data, o2 = e2.rows, r2 = e2.flatRows, i2 = e2.rowsById, u2 = e2.allColumns, s2 = e2.filterTypes, a2 = e2.manualFilters, c2 = e2.defaultCanFilter, d2 = void 0 !== c2 && c2, f2 = e2.disableFilters, p2 = e2.state.filters, g2 = e2.dispatch, v2 = e2.autoResetFilters, m2 = void 0 === v2 || v2, y2 = t.useCallback(function(e3, t2) {
          g2({ type: l.setFilter, columnId: e3, filterValue: t2 });
        }, [g2]), R2 = t.useCallback(function(e3) {
          g2({ type: l.setAllFilters, filters: e3 });
        }, [g2]);
        u2.forEach(function(e3) {
          var t2 = e3.id, n3 = e3.accessor, o3 = e3.defaultCanFilter, r3 = e3.disableFilters;
          e3.canFilter = n3 ? I(true !== r3 && void 0, true !== f2 && void 0, true) : I(o3, d2, false), e3.setFilter = function(t3) {
            return y2(e3.id, t3);
          };
          var i3 = p2.find(function(e4) {
            return e4.id === t2;
          });
          e3.filterValue = i3 && i3.value;
        });
        var b2 = t.useMemo(function() {
          if (a2 || !p2.length) return [o2, r2, i2];
          var e3 = [], t2 = {};
          return [function n3(o3, r3) {
            void 0 === r3 && (r3 = 0);
            var i3 = o3;
            return (i3 = p2.reduce(function(e4, t3) {
              var n4 = t3.id, o4 = t3.value, i4 = u2.find(function(e5) {
                return e5.id === n4;
              });
              if (!i4) return e4;
              0 === r3 && (i4.preFilteredRows = e4);
              var l2 = k(i4.filter, s2 || {}, xe);
              return l2 ? (i4.filteredRows = l2(e4, [n4], o4), i4.filteredRows) : (console.warn("Could not find a valid 'column.filter' for column with the ID: " + i4.id + "."), e4);
            }, o3)).forEach(function(o4) {
              e3.push(o4), t2[o4.id] = o4, o4.subRows && (o4.subRows = o4.subRows && o4.subRows.length > 0 ? n3(o4.subRows, r3 + 1) : o4.subRows);
            }), i3;
          }(o2), e3, t2];
        }, [a2, p2, o2, r2, i2, u2, s2]), S2 = b2[0], C2 = b2[1], x2 = b2[2];
        t.useMemo(function() {
          u2.filter(function(e3) {
            return !p2.find(function(t2) {
              return t2.id === e3.id;
            });
          }).forEach(function(e3) {
            e3.preFilteredRows = S2, e3.filteredRows = S2;
          });
        }, [S2, p2, u2]);
        var P2 = h(m2);
        w(function() {
          P2() && g2({ type: l.resetFilters });
        }, [g2, a2 ? null : n2]), Object.assign(e2, { preFilteredRows: o2, preFilteredFlatRows: r2, preFilteredRowsById: i2, filteredRows: S2, filteredFlatRows: C2, filteredRowsById: x2, rows: S2, flatRows: C2, rowsById: x2, setFilter: y2, setAllFilters: R2 });
      }
      Pe.pluginName = "useFilters", l.resetGlobalFilter = "resetGlobalFilter", l.setGlobalFilter = "setGlobalFilter";
      var Ie = function(e2) {
        e2.stateReducers.push(Fe), e2.useInstance.push(Ge);
      };
      function Fe(e2, t2, n2, o2) {
        if (t2.type === l.resetGlobalFilter) return r({}, e2, { globalFilter: o2.initialState.globalFilter || void 0 });
        if (t2.type === l.setGlobalFilter) {
          var u2 = t2.filterValue, s2 = o2.userFilterTypes, a2 = k(o2.globalFilter, s2 || {}, xe), c2 = m(u2, e2.globalFilter);
          if (H(a2.autoRemove, c2)) {
            e2.globalFilter;
            return i(e2, ["globalFilter"]);
          }
          return r({}, e2, { globalFilter: c2 });
        }
      }
      function Ge(e2) {
        var n2 = e2.data, o2 = e2.rows, r2 = e2.flatRows, i2 = e2.rowsById, u2 = e2.allColumns, s2 = e2.filterTypes, a2 = e2.globalFilter, c2 = e2.manualGlobalFilter, d2 = e2.state.globalFilter, f2 = e2.dispatch, p2 = e2.autoResetGlobalFilter, g2 = void 0 === p2 || p2, v2 = e2.disableGlobalFilter, m2 = t.useCallback(function(e3) {
          f2({ type: l.setGlobalFilter, filterValue: e3 });
        }, [f2]), y2 = t.useMemo(function() {
          if (c2 || void 0 === d2) return [o2, r2, i2];
          var e3 = [], t2 = {}, n3 = k(a2, s2 || {}, xe);
          if (!n3) return console.warn("Could not find a valid 'globalFilter' option."), o2;
          u2.forEach(function(e4) {
            var t3 = e4.disableGlobalFilter;
            e4.canFilter = I(true !== t3 && void 0, true !== v2 && void 0, true);
          });
          var l2 = u2.filter(function(e4) {
            return true === e4.canFilter;
          });
          return [function o3(r3) {
            return (r3 = n3(r3, l2.map(function(e4) {
              return e4.id;
            }), d2)).forEach(function(n4) {
              e3.push(n4), t2[n4.id] = n4, n4.subRows = n4.subRows && n4.subRows.length ? o3(n4.subRows) : n4.subRows;
            }), r3;
          }(o2), e3, t2];
        }, [c2, d2, a2, s2, u2, o2, r2, i2, v2]), R2 = y2[0], b2 = y2[1], S2 = y2[2], C2 = h(g2);
        w(function() {
          C2() && f2({ type: l.resetGlobalFilter });
        }, [f2, c2 ? null : n2]), Object.assign(e2, { preGlobalFilteredRows: o2, preGlobalFilteredFlatRows: r2, preGlobalFilteredRowsById: i2, globalFilteredRows: R2, globalFilteredFlatRows: b2, globalFilteredRowsById: S2, rows: R2, flatRows: b2, rowsById: S2, setGlobalFilter: m2, disableGlobalFilter: v2 });
      }
      function Ae(e2, t2) {
        return t2.reduce(function(e3, t3) {
          return e3 + ("number" == typeof t3 ? t3 : 0);
        }, 0);
      }
      Ie.pluginName = "useGlobalFilter";
      var ke = Object.freeze({ __proto__: null, sum: Ae, min: function(e2) {
        var t2 = e2[0] || 0;
        return e2.forEach(function(e3) {
          "number" == typeof e3 && (t2 = Math.min(t2, e3));
        }), t2;
      }, max: function(e2) {
        var t2 = e2[0] || 0;
        return e2.forEach(function(e3) {
          "number" == typeof e3 && (t2 = Math.max(t2, e3));
        }), t2;
      }, minMax: function(e2) {
        var t2 = e2[0] || 0, n2 = e2[0] || 0;
        return e2.forEach(function(e3) {
          "number" == typeof e3 && (t2 = Math.min(t2, e3), n2 = Math.max(n2, e3));
        }), t2 + ".." + n2;
      }, average: function(e2) {
        return Ae(0, e2) / e2.length;
      }, median: function(e2) {
        if (!e2.length) return null;
        var t2 = Math.floor(e2.length / 2), n2 = [].concat(e2).sort(function(e3, t3) {
          return e3 - t3;
        });
        return e2.length % 2 != 0 ? n2[t2] : (n2[t2 - 1] + n2[t2]) / 2;
      }, unique: function(e2) {
        return Array.from(new Set(e2).values());
      }, uniqueCount: function(e2) {
        return new Set(e2).size;
      }, count: function(e2) {
        return e2.length;
      } }), He = [], We = {};
      l.resetGroupBy = "resetGroupBy", l.setGroupBy = "setGroupBy", l.toggleGroupBy = "toggleGroupBy";
      var ze = function(e2) {
        e2.getGroupByToggleProps = [Te], e2.stateReducers.push(Oe), e2.visibleColumnsDeps.push(function(e3, t2) {
          var n2 = t2.instance;
          return [].concat(e3, [n2.state.groupBy]);
        }), e2.visibleColumns.push(Me), e2.useInstance.push(Le), e2.prepareRow.push(Ne);
      };
      ze.pluginName = "useGroupBy";
      var Te = function(e2, t2) {
        var n2 = t2.header;
        return [e2, { onClick: n2.canGroupBy ? function(e3) {
          e3.persist(), n2.toggleGroupBy();
        } : void 0, style: { cursor: n2.canGroupBy ? "pointer" : void 0 }, title: "Toggle GroupBy" }];
      };
      function Oe(e2, t2, n2, o2) {
        if (t2.type === l.init) return r({ groupBy: [] }, e2);
        if (t2.type === l.resetGroupBy) return r({}, e2, { groupBy: o2.initialState.groupBy || [] });
        if (t2.type === l.setGroupBy) return r({}, e2, { groupBy: t2.value });
        if (t2.type === l.toggleGroupBy) {
          var i2 = t2.columnId, u2 = t2.value, s2 = void 0 !== u2 ? u2 : !e2.groupBy.includes(i2);
          return r({}, e2, s2 ? { groupBy: [].concat(e2.groupBy, [i2]) } : { groupBy: e2.groupBy.filter(function(e3) {
            return e3 !== i2;
          }) });
        }
      }
      function Me(e2, t2) {
        var n2 = t2.instance.state.groupBy, o2 = n2.map(function(t3) {
          return e2.find(function(e3) {
            return e3.id === t3;
          });
        }).filter(Boolean), r2 = e2.filter(function(e3) {
          return !n2.includes(e3.id);
        });
        return (e2 = [].concat(o2, r2)).forEach(function(e3) {
          e3.isGrouped = n2.includes(e3.id), e3.groupedIndex = n2.indexOf(e3.id);
        }), e2;
      }
      var je = {};
      function Le(e2) {
        var n2 = e2.data, o2 = e2.rows, i2 = e2.flatRows, u2 = e2.rowsById, s2 = e2.allColumns, a2 = e2.flatHeaders, c2 = e2.groupByFn, d2 = void 0 === c2 ? De : c2, p2 = e2.manualGroupBy, g2 = e2.aggregations, m2 = void 0 === g2 ? je : g2, y2 = e2.plugins, R2 = e2.state.groupBy, b2 = e2.dispatch, S2 = e2.autoResetGroupBy, C2 = void 0 === S2 || S2, x2 = e2.disableGroupBy, P2 = e2.defaultCanGroupBy, B2 = e2.getHooks;
        v(y2, ["useColumnOrder", "useFilters"], "useGroupBy");
        var E2 = h(e2);
        s2.forEach(function(t2) {
          var n3 = t2.accessor, o3 = t2.defaultGroupBy, r2 = t2.disableGroupBy;
          t2.canGroupBy = n3 ? I(t2.canGroupBy, true !== r2 && void 0, true !== x2 && void 0, true) : I(t2.canGroupBy, o3, P2, false), t2.canGroupBy && (t2.toggleGroupBy = function() {
            return e2.toggleGroupBy(t2.id);
          }), t2.Aggregated = t2.Aggregated || t2.Cell;
        });
        var F2 = t.useCallback(function(e3, t2) {
          b2({ type: l.toggleGroupBy, columnId: e3, value: t2 });
        }, [b2]), A2 = t.useCallback(function(e3) {
          b2({ type: l.setGroupBy, value: e3 });
        }, [b2]);
        a2.forEach(function(e3) {
          e3.getGroupByToggleProps = f(B2().getGroupByToggleProps, { instance: E2(), header: e3 });
        });
        var k2 = t.useMemo(function() {
          if (p2 || !R2.length) return [o2, i2, u2, He, We, i2, u2];
          var e3 = R2.filter(function(e4) {
            return s2.find(function(t3) {
              return t3.id === e4;
            });
          }), t2 = [], n3 = {}, l2 = [], a3 = {}, c3 = [], f2 = {}, g3 = function o3(i3, u3, p3) {
            if (void 0 === u3 && (u3 = 0), u3 === e3.length) return i3.map(function(e4) {
              return r({}, e4, { depth: u3 });
            });
            var g4 = e3[u3], v2 = d2(i3, g4);
            return Object.entries(v2).map(function(r2, i4) {
              var d3 = r2[0], v3 = r2[1], h2 = g4 + ":" + d3, y3 = o3(v3, u3 + 1, h2 = p3 ? p3 + ">" + h2 : h2), w2 = u3 ? G(v3, "leafRows") : v3, R3 = function(t3, n4, o4) {
                var r3 = {};
                return s2.forEach(function(i5) {
                  if (e3.includes(i5.id)) r3[i5.id] = n4[0] ? n4[0].values[i5.id] : null;
                  else {
                    var u4 = "function" == typeof i5.aggregate ? i5.aggregate : m2[i5.aggregate] || ke[i5.aggregate];
                    if (u4) {
                      var l3 = n4.map(function(e4) {
                        return e4.values[i5.id];
                      }), s3 = t3.map(function(e4) {
                        var t4 = e4.values[i5.id];
                        if (!o4 && i5.aggregateValue) {
                          var n5 = "function" == typeof i5.aggregateValue ? i5.aggregateValue : m2[i5.aggregateValue] || ke[i5.aggregateValue];
                          if (!n5) throw console.info({ column: i5 }), new Error("React Table: Invalid column.aggregateValue option for column listed above");
                          t4 = n5(t4, e4, i5);
                        }
                        return t4;
                      });
                      r3[i5.id] = u4(s3, l3);
                    } else {
                      if (i5.aggregate) throw console.info({ column: i5 }), new Error("React Table: Invalid column.aggregate option for column listed above");
                      r3[i5.id] = null;
                    }
                  }
                }), r3;
              }(w2, v3, u3), b3 = { id: h2, isGrouped: true, groupByID: g4, groupByVal: d3, values: R3, subRows: y3, leafRows: w2, depth: u3, index: i4 };
              return y3.forEach(function(e4) {
                t2.push(e4), n3[e4.id] = e4, e4.isGrouped ? (l2.push(e4), a3[e4.id] = e4) : (c3.push(e4), f2[e4.id] = e4);
              }), b3;
            });
          }(o2);
          return g3.forEach(function(e4) {
            t2.push(e4), n3[e4.id] = e4, e4.isGrouped ? (l2.push(e4), a3[e4.id] = e4) : (c3.push(e4), f2[e4.id] = e4);
          }), [g3, t2, n3, l2, a3, c3, f2];
        }, [p2, R2, o2, i2, u2, s2, m2, d2]), H2 = k2[0], W2 = k2[1], z2 = k2[2], T2 = k2[3], O2 = k2[4], M2 = k2[5], j2 = k2[6], L2 = h(C2);
        w(function() {
          L2() && b2({ type: l.resetGroupBy });
        }, [b2, p2 ? null : n2]), Object.assign(e2, { preGroupedRows: o2, preGroupedFlatRow: i2, preGroupedRowsById: u2, groupedRows: H2, groupedFlatRows: W2, groupedRowsById: z2, onlyGroupedFlatRows: T2, onlyGroupedRowsById: O2, nonGroupedFlatRows: M2, nonGroupedRowsById: j2, rows: H2, flatRows: W2, rowsById: z2, toggleGroupBy: F2, setGroupBy: A2 });
      }
      function Ne(e2) {
        e2.allCells.forEach(function(t2) {
          var n2;
          t2.isGrouped = t2.column.isGrouped && t2.column.id === e2.groupByID, t2.isPlaceholder = !t2.isGrouped && t2.column.isGrouped, t2.isAggregated = !t2.isGrouped && !t2.isPlaceholder && (null == (n2 = e2.subRows) ? void 0 : n2.length);
        });
      }
      function De(e2, t2) {
        return e2.reduce(function(e3, n2, o2) {
          var r2 = "" + n2.values[t2];
          return e3[r2] = Array.isArray(e3[r2]) ? e3[r2] : [], e3[r2].push(n2), e3;
        }, {});
      }
      var Ve = /([0-9]+)/gm;
      function _e(e2, t2) {
        return e2 === t2 ? 0 : e2 > t2 ? 1 : -1;
      }
      function Xe(e2, t2, n2) {
        return [e2.values[n2], t2.values[n2]];
      }
      function qe(e2) {
        return "number" == typeof e2 ? isNaN(e2) || e2 === 1 / 0 || e2 === -1 / 0 ? "" : String(e2) : "string" == typeof e2 ? e2 : "";
      }
      var Ke = Object.freeze({ __proto__: null, alphanumeric: function(e2, t2, n2) {
        var o2 = Xe(e2, t2, n2), r2 = o2[0], i2 = o2[1];
        for (r2 = qe(r2), i2 = qe(i2), r2 = r2.split(Ve).filter(Boolean), i2 = i2.split(Ve).filter(Boolean); r2.length && i2.length; ) {
          var u2 = r2.shift(), l2 = i2.shift(), s2 = parseInt(u2, 10), a2 = parseInt(l2, 10), c2 = [s2, a2].sort();
          if (isNaN(c2[0])) {
            if (u2 > l2) return 1;
            if (l2 > u2) return -1;
          } else {
            if (isNaN(c2[1])) return isNaN(s2) ? -1 : 1;
            if (s2 > a2) return 1;
            if (a2 > s2) return -1;
          }
        }
        return r2.length - i2.length;
      }, datetime: function(e2, t2, n2) {
        var o2 = Xe(e2, t2, n2), r2 = o2[0], i2 = o2[1];
        return _e(r2 = r2.getTime(), i2 = i2.getTime());
      }, basic: function(e2, t2, n2) {
        var o2 = Xe(e2, t2, n2);
        return _e(o2[0], o2[1]);
      }, string: function(e2, t2, n2) {
        var o2 = Xe(e2, t2, n2), r2 = o2[0], i2 = o2[1];
        for (r2 = r2.split("").filter(Boolean), i2 = i2.split("").filter(Boolean); r2.length && i2.length; ) {
          var u2 = r2.shift(), l2 = i2.shift(), s2 = u2.toLowerCase(), a2 = l2.toLowerCase();
          if (s2 > a2) return 1;
          if (a2 > s2) return -1;
          if (u2 > l2) return 1;
          if (l2 > u2) return -1;
        }
        return r2.length - i2.length;
      }, number: function(e2, t2, n2) {
        var o2 = Xe(e2, t2, n2), r2 = o2[0], i2 = o2[1], u2 = /[^0-9.]/gi;
        return _e(r2 = Number(String(r2).replace(u2, "")), i2 = Number(String(i2).replace(u2, "")));
      } });
      l.resetSortBy = "resetSortBy", l.setSortBy = "setSortBy", l.toggleSortBy = "toggleSortBy", l.clearSortBy = "clearSortBy", c.sortType = "alphanumeric", c.sortDescFirst = false;
      var Ue = function(e2) {
        e2.getSortByToggleProps = [$e], e2.stateReducers.push(Je), e2.useInstance.push(Ye);
      };
      Ue.pluginName = "useSortBy";
      var $e = function(e2, t2) {
        var n2 = t2.instance, o2 = t2.column, r2 = n2.isMultiSortEvent, i2 = void 0 === r2 ? function(e3) {
          return e3.shiftKey;
        } : r2;
        return [e2, { onClick: o2.canSort ? function(e3) {
          e3.persist(), o2.toggleSortBy(void 0, !n2.disableMultiSort && i2(e3));
        } : void 0, style: { cursor: o2.canSort ? "pointer" : void 0 }, title: o2.canSort ? "Toggle SortBy" : void 0 }];
      };
      function Je(e2, t2, n2, o2) {
        if (t2.type === l.init) return r({ sortBy: [] }, e2);
        if (t2.type === l.resetSortBy) return r({}, e2, { sortBy: o2.initialState.sortBy || [] });
        if (t2.type === l.clearSortBy) return r({}, e2, { sortBy: e2.sortBy.filter(function(e3) {
          return e3.id !== t2.columnId;
        }) });
        if (t2.type === l.setSortBy) return r({}, e2, { sortBy: t2.sortBy });
        if (t2.type === l.toggleSortBy) {
          var i2, u2 = t2.columnId, s2 = t2.desc, a2 = t2.multi, c2 = o2.allColumns, d2 = o2.disableMultiSort, f2 = o2.disableSortRemove, p2 = o2.disableMultiRemove, g2 = o2.maxMultiSortColCount, v2 = void 0 === g2 ? Number.MAX_SAFE_INTEGER : g2, m2 = e2.sortBy, h2 = c2.find(function(e3) {
            return e3.id === u2;
          }).sortDescFirst, y2 = m2.find(function(e3) {
            return e3.id === u2;
          }), w2 = m2.findIndex(function(e3) {
            return e3.id === u2;
          }), R2 = null != s2, b2 = [];
          return "toggle" !== (i2 = !d2 && a2 ? y2 ? "toggle" : "add" : w2 !== m2.length - 1 || 1 !== m2.length ? "replace" : y2 ? "toggle" : "replace") || f2 || R2 || a2 && p2 || !(y2 && y2.desc && !h2 || !y2.desc && h2) || (i2 = "remove"), "replace" === i2 ? b2 = [{ id: u2, desc: R2 ? s2 : h2 }] : "add" === i2 ? (b2 = [].concat(m2, [{ id: u2, desc: R2 ? s2 : h2 }])).splice(0, b2.length - v2) : "toggle" === i2 ? b2 = m2.map(function(e3) {
            return e3.id === u2 ? r({}, e3, { desc: R2 ? s2 : !y2.desc }) : e3;
          }) : "remove" === i2 && (b2 = m2.filter(function(e3) {
            return e3.id !== u2;
          })), r({}, e2, { sortBy: b2 });
        }
      }
      function Ye(e2) {
        var n2 = e2.data, o2 = e2.rows, r2 = e2.flatRows, i2 = e2.allColumns, u2 = e2.orderByFn, s2 = void 0 === u2 ? Qe : u2, a2 = e2.sortTypes, c2 = e2.manualSortBy, d2 = e2.defaultCanSort, p2 = e2.disableSortBy, g2 = e2.flatHeaders, m2 = e2.state.sortBy, y2 = e2.dispatch, R2 = e2.plugins, b2 = e2.getHooks, S2 = e2.autoResetSortBy, C2 = void 0 === S2 || S2;
        v(R2, ["useFilters", "useGlobalFilter", "useGroupBy", "usePivotColumns"], "useSortBy");
        var x2 = t.useCallback(function(e3) {
          y2({ type: l.setSortBy, sortBy: e3 });
        }, [y2]), P2 = t.useCallback(function(e3, t2, n3) {
          y2({ type: l.toggleSortBy, columnId: e3, desc: t2, multi: n3 });
        }, [y2]), B2 = h(e2);
        g2.forEach(function(e3) {
          var t2 = e3.accessor, n3 = e3.canSort, o3 = e3.disableSortBy, r3 = e3.id, i3 = t2 ? I(true !== o3 && void 0, true !== p2 && void 0, true) : I(d2, n3, false);
          e3.canSort = i3, e3.canSort && (e3.toggleSortBy = function(t3, n4) {
            return P2(e3.id, t3, n4);
          }, e3.clearSortBy = function() {
            y2({ type: l.clearSortBy, columnId: e3.id });
          }), e3.getSortByToggleProps = f(b2().getSortByToggleProps, { instance: B2(), column: e3 });
          var u3 = m2.find(function(e4) {
            return e4.id === r3;
          });
          e3.isSorted = !!u3, e3.sortedIndex = m2.findIndex(function(e4) {
            return e4.id === r3;
          }), e3.isSortedDesc = e3.isSorted ? u3.desc : void 0;
        });
        var E2 = t.useMemo(function() {
          if (c2 || !m2.length) return [o2, r2];
          var e3 = [], t2 = m2.filter(function(e4) {
            return i2.find(function(t3) {
              return t3.id === e4.id;
            });
          });
          return [function n3(o3) {
            var r3 = s2(o3, t2.map(function(e4) {
              var t3 = i2.find(function(t4) {
                return t4.id === e4.id;
              });
              if (!t3) throw new Error("React-Table: Could not find a column with id: " + e4.id + " while sorting");
              var n4 = t3.sortType, o4 = F(n4) || (a2 || {})[n4] || Ke[n4];
              if (!o4) throw new Error("React-Table: Could not find a valid sortType of '" + n4 + "' for column '" + e4.id + "'.");
              return function(t4, n5) {
                return o4(t4, n5, e4.id, e4.desc);
              };
            }), t2.map(function(e4) {
              var t3 = i2.find(function(t4) {
                return t4.id === e4.id;
              });
              return t3 && t3.sortInverted ? e4.desc : !e4.desc;
            }));
            return r3.forEach(function(t3) {
              e3.push(t3), t3.subRows && 0 !== t3.subRows.length && (t3.subRows = n3(t3.subRows));
            }), r3;
          }(o2), e3];
        }, [c2, m2, o2, r2, i2, s2, a2]), G2 = E2[0], A2 = E2[1], k2 = h(C2);
        w(function() {
          k2() && y2({ type: l.resetSortBy });
        }, [c2 ? null : n2]), Object.assign(e2, { preSortedRows: o2, preSortedFlatRows: r2, sortedRows: G2, sortedFlatRows: A2, rows: G2, flatRows: A2, setSortBy: x2, toggleSortBy: P2 });
      }
      function Qe(e2, t2, n2) {
        return [].concat(e2).sort(function(e3, o2) {
          for (var r2 = 0; r2 < t2.length; r2 += 1) {
            var i2 = t2[r2], u2 = false === n2[r2] || "desc" === n2[r2], l2 = i2(e3, o2);
            if (0 !== l2) return u2 ? -l2 : l2;
          }
          return n2[0] ? e3.index - o2.index : o2.index - e3.index;
        });
      }
      l.resetPage = "resetPage", l.gotoPage = "gotoPage", l.setPageSize = "setPageSize";
      var Ze = function(e2) {
        e2.stateReducers.push(et), e2.useInstance.push(tt);
      };
      function et(e2, t2, n2, o2) {
        if (t2.type === l.init) return r({ pageSize: 10, pageIndex: 0 }, e2);
        if (t2.type === l.resetPage) return r({}, e2, { pageIndex: o2.initialState.pageIndex || 0 });
        if (t2.type === l.gotoPage) {
          var i2 = o2.pageCount, u2 = o2.page, s2 = m(t2.pageIndex, e2.pageIndex), a2 = false;
          return s2 > e2.pageIndex ? a2 = -1 === i2 ? u2.length >= e2.pageSize : s2 < i2 : s2 < e2.pageIndex && (a2 = s2 > -1), a2 ? r({}, e2, { pageIndex: s2 }) : e2;
        }
        if (t2.type === l.setPageSize) {
          var c2 = t2.pageSize, d2 = e2.pageSize * e2.pageIndex;
          return r({}, e2, { pageIndex: Math.floor(d2 / c2), pageSize: c2 });
        }
      }
      function tt(e2) {
        var n2 = e2.rows, o2 = e2.autoResetPage, r2 = void 0 === o2 || o2, i2 = e2.manualExpandedKey, u2 = void 0 === i2 ? "expanded" : i2, s2 = e2.plugins, a2 = e2.pageCount, c2 = e2.paginateExpandedRows, d2 = void 0 === c2 || c2, f2 = e2.expandSubRows, p2 = void 0 === f2 || f2, g2 = e2.state, m2 = g2.pageSize, y2 = g2.pageIndex, R2 = g2.expanded, b2 = g2.globalFilter, S2 = g2.filters, C2 = g2.groupBy, x2 = g2.sortBy, P2 = e2.dispatch, B2 = e2.data, E2 = e2.manualPagination;
        v(s2, ["useGlobalFilter", "useFilters", "useGroupBy", "useSortBy", "useExpanded"], "usePagination");
        var I2 = h(r2);
        w(function() {
          I2() && P2({ type: l.resetPage });
        }, [P2, E2 ? null : B2, b2, S2, C2, x2]);
        var F2 = E2 ? a2 : Math.ceil(n2.length / m2), G2 = t.useMemo(function() {
          return F2 > 0 ? [].concat(new Array(F2)).fill(null).map(function(e3, t2) {
            return t2;
          }) : [];
        }, [F2]), k2 = t.useMemo(function() {
          var e3;
          if (E2) e3 = n2;
          else {
            var t2 = m2 * y2, o3 = t2 + m2;
            e3 = n2.slice(t2, o3);
          }
          return d2 ? e3 : A(e3, { manualExpandedKey: u2, expanded: R2, expandSubRows: p2 });
        }, [p2, R2, u2, E2, y2, m2, d2, n2]), H2 = y2 > 0, W2 = -1 === F2 ? k2.length >= m2 : y2 < F2 - 1, z2 = t.useCallback(function(e3) {
          P2({ type: l.gotoPage, pageIndex: e3 });
        }, [P2]), T2 = t.useCallback(function() {
          return z2(function(e3) {
            return e3 - 1;
          });
        }, [z2]), O2 = t.useCallback(function() {
          return z2(function(e3) {
            return e3 + 1;
          });
        }, [z2]), M2 = t.useCallback(function(e3) {
          P2({ type: l.setPageSize, pageSize: e3 });
        }, [P2]);
        Object.assign(e2, { pageOptions: G2, pageCount: F2, page: k2, canPreviousPage: H2, canNextPage: W2, gotoPage: z2, previousPage: T2, nextPage: O2, setPageSize: M2 });
      }
      Ze.pluginName = "usePagination", l.resetPivot = "resetPivot", l.togglePivot = "togglePivot";
      var nt = function(e2) {
        e2.getPivotToggleProps = [rt], e2.stateReducers.push(it), e2.useInstanceAfterData.push(ut), e2.allColumns.push(lt), e2.accessValue.push(st), e2.materializedColumns.push(at), e2.materializedColumnsDeps.push(ct), e2.visibleColumns.push(dt), e2.visibleColumnsDeps.push(ft), e2.useInstance.push(pt), e2.prepareRow.push(gt);
      };
      nt.pluginName = "usePivotColumns";
      var ot = [], rt = function(e2, t2) {
        var n2 = t2.header;
        return [e2, { onClick: n2.canPivot ? function(e3) {
          e3.persist(), n2.togglePivot();
        } : void 0, style: { cursor: n2.canPivot ? "pointer" : void 0 }, title: "Toggle Pivot" }];
      };
      function it(e2, t2, n2, o2) {
        if (t2.type === l.init) return r({ pivotColumns: ot }, e2);
        if (t2.type === l.resetPivot) return r({}, e2, { pivotColumns: o2.initialState.pivotColumns || ot });
        if (t2.type === l.togglePivot) {
          var i2 = t2.columnId, u2 = t2.value, s2 = void 0 !== u2 ? u2 : !e2.pivotColumns.includes(i2);
          return r({}, e2, s2 ? { pivotColumns: [].concat(e2.pivotColumns, [i2]) } : { pivotColumns: e2.pivotColumns.filter(function(e3) {
            return e3 !== i2;
          }) });
        }
      }
      function ut(e2) {
        e2.allColumns.forEach(function(t2) {
          t2.isPivotSource = e2.state.pivotColumns.includes(t2.id);
        });
      }
      function lt(e2, t2) {
        var n2 = t2.instance;
        return e2.forEach(function(e3) {
          e3.isPivotSource = n2.state.pivotColumns.includes(e3.id), e3.uniqueValues = /* @__PURE__ */ new Set();
        }), e2;
      }
      function st(e2, t2) {
        var n2 = t2.column;
        return n2.uniqueValues && void 0 !== e2 && n2.uniqueValues.add(e2), e2;
      }
      function at(e2, t2) {
        var n2 = t2.instance, o2 = n2.allColumns, i2 = n2.state;
        if (!i2.pivotColumns.length || !i2.groupBy || !i2.groupBy.length) return e2;
        var u2 = i2.pivotColumns.map(function(e3) {
          return o2.find(function(t3) {
            return t3.id === e3;
          });
        }).filter(Boolean), l2 = o2.filter(function(e3) {
          return !e3.isPivotSource && !i2.groupBy.includes(e3.id) && !i2.pivotColumns.includes(e3.id);
        }), s2 = C(function e3(t3, n3, o3) {
          void 0 === t3 && (t3 = 0), void 0 === o3 && (o3 = []);
          var i3 = u2[t3];
          return i3 ? Array.from(i3.uniqueValues).sort().map(function(u3) {
            var l3 = r({}, i3, { Header: i3.PivotHeader || "string" == typeof i3.header ? i3.Header + ": " + u3 : u3, isPivotGroup: true, parent: n3, depth: t3, id: n3 ? n3.id + "." + i3.id + "." + u3 : i3.id + "." + u3, pivotValue: u3 });
            return l3.columns = e3(t3 + 1, l3, [].concat(o3, [function(e4) {
              return e4.values[i3.id] === u3;
            }])), l3;
          }) : l2.map(function(e4) {
            return r({}, e4, { canPivot: false, isPivoted: true, parent: n3, depth: t3, id: "" + (n3 ? n3.id + "." + e4.id : e4.id), accessor: function(t4, n4, r2) {
              if (o3.every(function(e5) {
                return e5(r2);
              })) return r2.values[e4.id];
            } });
          });
        }());
        return [].concat(e2, s2);
      }
      function ct(e2, t2) {
        var n2 = t2.instance.state, o2 = n2.pivotColumns, r2 = n2.groupBy;
        return [].concat(e2, [o2, r2]);
      }
      function dt(e2, t2) {
        var n2 = t2.instance.state;
        return e2 = e2.filter(function(e3) {
          return !e3.isPivotSource;
        }), n2.pivotColumns.length && n2.groupBy && n2.groupBy.length && (e2 = e2.filter(function(e3) {
          return e3.isGrouped || e3.isPivoted;
        })), e2;
      }
      function ft(e2, t2) {
        var n2 = t2.instance;
        return [].concat(e2, [n2.state.pivotColumns, n2.state.groupBy]);
      }
      function pt(e2) {
        var t2 = e2.columns, n2 = e2.allColumns, o2 = e2.flatHeaders, r2 = e2.getHooks, i2 = e2.plugins, u2 = e2.dispatch, s2 = e2.autoResetPivot, a2 = void 0 === s2 || s2, c2 = e2.manaulPivot, d2 = e2.disablePivot, p2 = e2.defaultCanPivot;
        v(i2, ["useGroupBy"], "usePivotColumns");
        var g2 = h(e2);
        n2.forEach(function(t3) {
          var n3 = t3.accessor, o3 = t3.defaultPivot, r3 = t3.disablePivot;
          t3.canPivot = n3 ? I(t3.canPivot, true !== r3 && void 0, true !== d2 && void 0, true) : I(t3.canPivot, o3, p2, false), t3.canPivot && (t3.togglePivot = function() {
            return e2.togglePivot(t3.id);
          }), t3.Aggregated = t3.Aggregated || t3.Cell;
        });
        o2.forEach(function(e3) {
          e3.getPivotToggleProps = f(r2().getPivotToggleProps, { instance: g2(), header: e3 });
        });
        var m2 = h(a2);
        w(function() {
          m2() && u2({ type: l.resetPivot });
        }, [u2, c2 ? null : t2]), Object.assign(e2, { togglePivot: function(e3, t3) {
          u2({ type: l.togglePivot, columnId: e3, value: t3 });
        } });
      }
      function gt(e2) {
        e2.allCells.forEach(function(e3) {
          e3.isPivoted = e3.column.isPivoted;
        });
      }
      l.resetSelectedRows = "resetSelectedRows", l.toggleAllRowsSelected = "toggleAllRowsSelected", l.toggleRowSelected = "toggleRowSelected", l.toggleAllPageRowsSelected = "toggleAllPageRowsSelected";
      var vt = function(e2) {
        e2.getToggleRowSelectedProps = [mt], e2.getToggleAllRowsSelectedProps = [ht], e2.getToggleAllPageRowsSelectedProps = [yt], e2.stateReducers.push(wt), e2.useInstance.push(Rt), e2.prepareRow.push(bt);
      };
      vt.pluginName = "useRowSelect";
      var mt = function(e2, t2) {
        var n2 = t2.instance, o2 = t2.row, r2 = n2.manualRowSelectedKey, i2 = void 0 === r2 ? "isSelected" : r2;
        return [e2, { onChange: function(e3) {
          o2.toggleRowSelected(e3.target.checked);
        }, style: { cursor: "pointer" }, checked: !(!o2.original || !o2.original[i2]) || o2.isSelected, title: "Toggle Row Selected", indeterminate: o2.isSomeSelected }];
      }, ht = function(e2, t2) {
        var n2 = t2.instance;
        return [e2, { onChange: function(e3) {
          n2.toggleAllRowsSelected(e3.target.checked);
        }, style: { cursor: "pointer" }, checked: n2.isAllRowsSelected, title: "Toggle All Rows Selected", indeterminate: Boolean(!n2.isAllRowsSelected && Object.keys(n2.state.selectedRowIds).length) }];
      }, yt = function(e2, t2) {
        var n2 = t2.instance;
        return [e2, { onChange: function(e3) {
          n2.toggleAllPageRowsSelected(e3.target.checked);
        }, style: { cursor: "pointer" }, checked: n2.isAllPageRowsSelected, title: "Toggle All Current Page Rows Selected", indeterminate: Boolean(!n2.isAllPageRowsSelected && n2.page.some(function(e3) {
          var t3 = e3.id;
          return n2.state.selectedRowIds[t3];
        })) }];
      };
      function wt(e2, t2, n2, o2) {
        if (t2.type === l.init) return r({ selectedRowIds: {} }, e2);
        if (t2.type === l.resetSelectedRows) return r({}, e2, { selectedRowIds: o2.initialState.selectedRowIds || {} });
        if (t2.type === l.toggleAllRowsSelected) {
          var i2 = t2.value, u2 = o2.isAllRowsSelected, s2 = o2.rowsById, a2 = o2.nonGroupedRowsById, c2 = void 0 === a2 ? s2 : a2, d2 = void 0 !== i2 ? i2 : !u2, f2 = Object.assign({}, e2.selectedRowIds);
          return d2 ? Object.keys(c2).forEach(function(e3) {
            f2[e3] = true;
          }) : Object.keys(c2).forEach(function(e3) {
            delete f2[e3];
          }), r({}, e2, { selectedRowIds: f2 });
        }
        if (t2.type === l.toggleRowSelected) {
          var p2 = t2.id, g2 = t2.value, v2 = o2.rowsById, m2 = o2.selectSubRows, h2 = void 0 === m2 || m2, y2 = o2.getSubRows, w2 = e2.selectedRowIds[p2], R2 = void 0 !== g2 ? g2 : !w2;
          if (w2 === R2) return e2;
          var b2 = r({}, e2.selectedRowIds);
          return function e3(t3) {
            var n3 = v2[t3];
            if (n3 && (n3.isGrouped || (R2 ? b2[t3] = true : delete b2[t3]), h2 && y2(n3))) return y2(n3).forEach(function(t4) {
              return e3(t4.id);
            });
          }(p2), r({}, e2, { selectedRowIds: b2 });
        }
        if (t2.type === l.toggleAllPageRowsSelected) {
          var S2 = t2.value, C2 = o2.page, x2 = o2.rowsById, P2 = o2.selectSubRows, B2 = void 0 === P2 || P2, E2 = o2.isAllPageRowsSelected, I2 = o2.getSubRows, F2 = void 0 !== S2 ? S2 : !E2, G2 = r({}, e2.selectedRowIds);
          return C2.forEach(function(e3) {
            return function e4(t3) {
              var n3 = x2[t3];
              if (n3.isGrouped || (F2 ? G2[t3] = true : delete G2[t3]), B2 && I2(n3)) return I2(n3).forEach(function(t4) {
                return e4(t4.id);
              });
            }(e3.id);
          }), r({}, e2, { selectedRowIds: G2 });
        }
        return e2;
      }
      function Rt(e2) {
        var n2 = e2.data, o2 = e2.rows, r2 = e2.getHooks, i2 = e2.plugins, u2 = e2.rowsById, s2 = e2.nonGroupedRowsById, a2 = void 0 === s2 ? u2 : s2, c2 = e2.autoResetSelectedRows, d2 = void 0 === c2 || c2, p2 = e2.state.selectedRowIds, g2 = e2.selectSubRows, m2 = void 0 === g2 || g2, y2 = e2.dispatch, R2 = e2.page, b2 = e2.getSubRows;
        v(i2, ["useFilters", "useGroupBy", "useSortBy", "useExpanded", "usePagination"], "useRowSelect");
        var S2 = t.useMemo(function() {
          var e3 = [];
          return o2.forEach(function(t2) {
            var n3 = m2 ? function e4(t3, n4, o3) {
              if (n4[t3.id]) return true;
              var r3 = o3(t3);
              if (r3 && r3.length) {
                var i3 = true, u3 = false;
                return r3.forEach(function(t4) {
                  u3 && !i3 || (e4(t4, n4, o3) ? u3 = true : i3 = false);
                }), !!i3 || !!u3 && null;
              }
              return false;
            }(t2, p2, b2) : !!p2[t2.id];
            t2.isSelected = !!n3, t2.isSomeSelected = null === n3, n3 && e3.push(t2);
          }), e3;
        }, [o2, m2, p2, b2]), C2 = Boolean(Object.keys(a2).length && Object.keys(p2).length), x2 = C2;
        C2 && Object.keys(a2).some(function(e3) {
          return !p2[e3];
        }) && (C2 = false), C2 || R2 && R2.length && R2.some(function(e3) {
          var t2 = e3.id;
          return !p2[t2];
        }) && (x2 = false);
        var P2 = h(d2);
        w(function() {
          P2() && y2({ type: l.resetSelectedRows });
        }, [y2, n2]);
        var B2 = t.useCallback(function(e3) {
          return y2({ type: l.toggleAllRowsSelected, value: e3 });
        }, [y2]), E2 = t.useCallback(function(e3) {
          return y2({ type: l.toggleAllPageRowsSelected, value: e3 });
        }, [y2]), I2 = t.useCallback(function(e3, t2) {
          return y2({ type: l.toggleRowSelected, id: e3, value: t2 });
        }, [y2]), F2 = h(e2), G2 = f(r2().getToggleAllRowsSelectedProps, { instance: F2() }), A2 = f(r2().getToggleAllPageRowsSelectedProps, { instance: F2() });
        Object.assign(e2, { selectedFlatRows: S2, isAllRowsSelected: C2, isAllPageRowsSelected: x2, toggleRowSelected: I2, toggleAllRowsSelected: B2, getToggleAllRowsSelectedProps: G2, getToggleAllPageRowsSelectedProps: A2, toggleAllPageRowsSelected: E2 });
      }
      function bt(e2, t2) {
        var n2 = t2.instance;
        e2.toggleRowSelected = function(t3) {
          return n2.toggleRowSelected(e2.id, t3);
        }, e2.getToggleRowSelectedProps = f(n2.getHooks().getToggleRowSelectedProps, { instance: n2, row: e2 });
      }
      var St = function(e2) {
        return {};
      }, Ct = function(e2) {
        return {};
      };
      l.setRowState = "setRowState", l.setCellState = "setCellState", l.resetRowState = "resetRowState";
      var xt = function(e2) {
        e2.stateReducers.push(Pt), e2.useInstance.push(Bt), e2.prepareRow.push(Et);
      };
      function Pt(e2, t2, n2, o2) {
        var i2 = o2.initialRowStateAccessor, u2 = void 0 === i2 ? St : i2, s2 = o2.initialCellStateAccessor, a2 = void 0 === s2 ? Ct : s2, c2 = o2.rowsById;
        if (t2.type === l.init) return r({ rowState: {} }, e2);
        if (t2.type === l.resetRowState) return r({}, e2, { rowState: o2.initialState.rowState || {} });
        if (t2.type === l.setRowState) {
          var d2, f2 = t2.rowId, p2 = t2.value, g2 = void 0 !== e2.rowState[f2] ? e2.rowState[f2] : u2(c2[f2]);
          return r({}, e2, { rowState: r({}, e2.rowState, (d2 = {}, d2[f2] = m(p2, g2), d2)) });
        }
        if (t2.type === l.setCellState) {
          var v2, h2, y2, w2, R2, b2 = t2.rowId, S2 = t2.columnId, C2 = t2.value, x2 = void 0 !== e2.rowState[b2] ? e2.rowState[b2] : u2(c2[b2]), P2 = void 0 !== (null == x2 ? void 0 : null == (v2 = x2.cellState) ? void 0 : v2[S2]) ? x2.cellState[S2] : a2(null == (h2 = c2[b2]) ? void 0 : null == (y2 = h2.cells) ? void 0 : y2.find(function(e3) {
            return e3.column.id === S2;
          }));
          return r({}, e2, { rowState: r({}, e2.rowState, (R2 = {}, R2[b2] = r({}, x2, { cellState: r({}, x2.cellState || {}, (w2 = {}, w2[S2] = m(C2, P2), w2)) }), R2)) });
        }
      }
      function Bt(e2) {
        var n2 = e2.autoResetRowState, o2 = void 0 === n2 || n2, r2 = e2.data, i2 = e2.dispatch, u2 = t.useCallback(function(e3, t2) {
          return i2({ type: l.setRowState, rowId: e3, value: t2 });
        }, [i2]), s2 = t.useCallback(function(e3, t2, n3) {
          return i2({ type: l.setCellState, rowId: e3, columnId: t2, value: n3 });
        }, [i2]), a2 = h(o2);
        w(function() {
          a2() && i2({ type: l.resetRowState });
        }, [r2]), Object.assign(e2, { setRowState: u2, setCellState: s2 });
      }
      function Et(e2, t2) {
        var n2 = t2.instance, o2 = n2.initialRowStateAccessor, r2 = void 0 === o2 ? St : o2, i2 = n2.initialCellStateAccessor, u2 = void 0 === i2 ? Ct : i2, l2 = n2.state.rowState;
        e2 && (e2.state = void 0 !== l2[e2.id] ? l2[e2.id] : r2(e2), e2.setState = function(t3) {
          return n2.setRowState(e2.id, t3);
        }, e2.cells.forEach(function(t3) {
          e2.state.cellState || (e2.state.cellState = {}), t3.state = void 0 !== e2.state.cellState[t3.column.id] ? e2.state.cellState[t3.column.id] : u2(t3), t3.setState = function(o3) {
            return n2.setCellState(e2.id, t3.column.id, o3);
          };
        }));
      }
      xt.pluginName = "useRowState", l.resetColumnOrder = "resetColumnOrder", l.setColumnOrder = "setColumnOrder";
      var It = function(e2) {
        e2.stateReducers.push(Ft), e2.visibleColumnsDeps.push(function(e3, t2) {
          var n2 = t2.instance;
          return [].concat(e3, [n2.state.columnOrder]);
        }), e2.visibleColumns.push(Gt), e2.useInstance.push(At);
      };
      function Ft(e2, t2, n2, o2) {
        return t2.type === l.init ? r({ columnOrder: [] }, e2) : t2.type === l.resetColumnOrder ? r({}, e2, { columnOrder: o2.initialState.columnOrder || [] }) : t2.type === l.setColumnOrder ? r({}, e2, { columnOrder: m(t2.columnOrder, e2.columnOrder) }) : void 0;
      }
      function Gt(e2, t2) {
        var n2 = t2.instance.state.columnOrder;
        if (!n2 || !n2.length) return e2;
        for (var o2 = [].concat(n2), r2 = [].concat(e2), i2 = [], u2 = function() {
          var e3 = o2.shift(), t3 = r2.findIndex(function(t4) {
            return t4.id === e3;
          });
          t3 > -1 && i2.push(r2.splice(t3, 1)[0]);
        }; r2.length && o2.length; ) u2();
        return [].concat(i2, r2);
      }
      function At(e2) {
        var n2 = e2.dispatch;
        e2.setColumnOrder = t.useCallback(function(e3) {
          return n2({ type: l.setColumnOrder, columnOrder: e3 });
        }, [n2]);
      }
      It.pluginName = "useColumnOrder", c.canResize = true, l.columnStartResizing = "columnStartResizing", l.columnResizing = "columnResizing", l.columnDoneResizing = "columnDoneResizing", l.resetResize = "resetResize";
      var kt = function(e2) {
        e2.getResizerProps = [Ht], e2.getHeaderProps.push({ style: { position: "relative" } }), e2.stateReducers.push(Wt), e2.useInstance.push(Tt), e2.useInstanceBeforeDimensions.push(zt);
      }, Ht = function(e2, t2) {
        var n2 = t2.instance, o2 = t2.header, r2 = n2.dispatch, i2 = function(e3, t3) {
          var n3 = false;
          if ("touchstart" === e3.type) {
            if (e3.touches && e3.touches.length > 1) return;
            n3 = true;
          }
          var o3, i3, u2 = function(e4) {
            var t4 = [];
            return function e5(n4) {
              n4.columns && n4.columns.length && n4.columns.map(e5);
              t4.push(n4);
            }(e4), t4;
          }(t3).map(function(e4) {
            return [e4.id, e4.totalWidth];
          }), s2 = n3 ? Math.round(e3.touches[0].clientX) : e3.clientX, a2 = function() {
            window.cancelAnimationFrame(o3), o3 = null, r2({ type: l.columnDoneResizing });
          }, c2 = function() {
            window.cancelAnimationFrame(o3), o3 = null, r2({ type: l.columnResizing, clientX: i3 });
          }, d2 = function(e4) {
            i3 = e4, o3 || (o3 = window.requestAnimationFrame(c2));
          }, f2 = { mouse: { moveEvent: "mousemove", moveHandler: function(e4) {
            return d2(e4.clientX);
          }, upEvent: "mouseup", upHandler: function(e4) {
            document.removeEventListener("mousemove", f2.mouse.moveHandler), document.removeEventListener("mouseup", f2.mouse.upHandler), a2();
          } }, touch: { moveEvent: "touchmove", moveHandler: function(e4) {
            return e4.cancelable && (e4.preventDefault(), e4.stopPropagation()), d2(e4.touches[0].clientX), false;
          }, upEvent: "touchend", upHandler: function(e4) {
            document.removeEventListener(f2.touch.moveEvent, f2.touch.moveHandler), document.removeEventListener(f2.touch.upEvent, f2.touch.moveHandler), a2();
          } } }, p2 = n3 ? f2.touch : f2.mouse, g2 = !!function() {
            if ("boolean" == typeof z) return z;
            var e4 = false;
            try {
              var t4 = { get passive() {
                return e4 = true, false;
              } };
              window.addEventListener("test", null, t4), window.removeEventListener("test", null, t4);
            } catch (t5) {
              e4 = false;
            }
            return z = e4;
          }() && { passive: false };
          document.addEventListener(p2.moveEvent, p2.moveHandler, g2), document.addEventListener(p2.upEvent, p2.upHandler, g2), r2({ type: l.columnStartResizing, columnId: t3.id, columnWidth: t3.totalWidth, headerIdWidths: u2, clientX: s2 });
        };
        return [e2, { onMouseDown: function(e3) {
          return e3.persist() || i2(e3, o2);
        }, onTouchStart: function(e3) {
          return e3.persist() || i2(e3, o2);
        }, style: { cursor: "col-resize" }, draggable: false, role: "separator" }];
      };
      function Wt(e2, t2) {
        if (t2.type === l.init) return r({ columnResizing: { columnWidths: {} } }, e2);
        if (t2.type === l.resetResize) return r({}, e2, { columnResizing: { columnWidths: {} } });
        if (t2.type === l.columnStartResizing) {
          var n2 = t2.clientX, o2 = t2.columnId, i2 = t2.columnWidth, u2 = t2.headerIdWidths;
          return r({}, e2, { columnResizing: r({}, e2.columnResizing, { startX: n2, headerIdWidths: u2, columnWidth: i2, isResizingColumn: o2 }) });
        }
        if (t2.type === l.columnResizing) {
          var s2 = t2.clientX, a2 = e2.columnResizing, c2 = a2.startX, d2 = a2.columnWidth, f2 = a2.headerIdWidths, p2 = (s2 - c2) / d2, g2 = {};
          return (void 0 === f2 ? [] : f2).forEach(function(e3) {
            var t3 = e3[0], n3 = e3[1];
            g2[t3] = Math.max(n3 + n3 * p2, 0);
          }), r({}, e2, { columnResizing: r({}, e2.columnResizing, { columnWidths: r({}, e2.columnResizing.columnWidths, {}, g2) }) });
        }
        return t2.type === l.columnDoneResizing ? r({}, e2, { columnResizing: r({}, e2.columnResizing, { startX: null, isResizingColumn: null }) }) : void 0;
      }
      kt.pluginName = "useResizeColumns";
      var zt = function(e2) {
        var t2 = e2.flatHeaders, n2 = e2.disableResizing, o2 = e2.getHooks, r2 = e2.state.columnResizing, i2 = h(e2);
        t2.forEach(function(e3) {
          var t3 = I(true !== e3.disableResizing && void 0, true !== n2 && void 0, true);
          e3.canResize = t3, e3.width = r2.columnWidths[e3.id] || e3.originalWidth || e3.width, e3.isResizing = r2.isResizingColumn === e3.id, t3 && (e3.getResizerProps = f(o2().getResizerProps, { instance: i2(), header: e3 }));
        });
      };
      function Tt(e2) {
        var n2 = e2.plugins, o2 = e2.dispatch, r2 = e2.autoResetResize, i2 = void 0 === r2 || r2, u2 = e2.columns;
        v(n2, ["useAbsoluteLayout"], "useResizeColumns");
        var s2 = h(i2);
        w(function() {
          s2() && o2({ type: l.resetResize });
        }, [u2]);
        var a2 = t.useCallback(function() {
          return o2({ type: l.resetResize });
        }, [o2]);
        Object.assign(e2, { resetResizing: a2 });
      }
      var Ot = { position: "absolute", top: 0 }, Mt = function(e2) {
        e2.getTableBodyProps.push(jt), e2.getRowProps.push(jt), e2.getHeaderGroupProps.push(jt), e2.getFooterGroupProps.push(jt), e2.getHeaderProps.push(function(e3, t2) {
          var n2 = t2.column;
          return [e3, { style: r({}, Ot, { left: n2.totalLeft + "px", width: n2.totalWidth + "px" }) }];
        }), e2.getCellProps.push(function(e3, t2) {
          var n2 = t2.cell;
          return [e3, { style: r({}, Ot, { left: n2.column.totalLeft + "px", width: n2.column.totalWidth + "px" }) }];
        }), e2.getFooterProps.push(function(e3, t2) {
          var n2 = t2.column;
          return [e3, { style: r({}, Ot, { left: n2.totalLeft + "px", width: n2.totalWidth + "px" }) }];
        });
      };
      Mt.pluginName = "useAbsoluteLayout";
      var jt = function(e2, t2) {
        return [e2, { style: { position: "relative", width: t2.instance.totalColumnsWidth + "px" } }];
      }, Lt = { display: "inline-block", boxSizing: "border-box" }, Nt = function(e2, t2) {
        return [e2, { style: { display: "flex", width: t2.instance.totalColumnsWidth + "px" } }];
      }, Dt = function(e2) {
        e2.getRowProps.push(Nt), e2.getHeaderGroupProps.push(Nt), e2.getFooterGroupProps.push(Nt), e2.getHeaderProps.push(function(e3, t2) {
          var n2 = t2.column;
          return [e3, { style: r({}, Lt, { width: n2.totalWidth + "px" }) }];
        }), e2.getCellProps.push(function(e3, t2) {
          var n2 = t2.cell;
          return [e3, { style: r({}, Lt, { width: n2.column.totalWidth + "px" }) }];
        }), e2.getFooterProps.push(function(e3, t2) {
          var n2 = t2.column;
          return [e3, { style: r({}, Lt, { width: n2.totalWidth + "px" }) }];
        });
      };
      function Vt(e2) {
        e2.getTableProps.push(_t), e2.getRowProps.push(Xt), e2.getHeaderGroupProps.push(Xt), e2.getFooterGroupProps.push(Xt), e2.getHeaderProps.push(qt), e2.getCellProps.push(Kt), e2.getFooterProps.push(Ut);
      }
      Dt.pluginName = "useBlockLayout", Vt.pluginName = "useFlexLayout";
      var _t = function(e2, t2) {
        return [e2, { style: { minWidth: t2.instance.totalColumnsMinWidth + "px" } }];
      }, Xt = function(e2, t2) {
        return [e2, { style: { display: "flex", flex: "1 0 auto", minWidth: t2.instance.totalColumnsMinWidth + "px" } }];
      }, qt = function(e2, t2) {
        var n2 = t2.column;
        return [e2, { style: { boxSizing: "border-box", flex: n2.totalFlexWidth ? n2.totalFlexWidth + " 0 auto" : void 0, minWidth: n2.totalMinWidth + "px", width: n2.totalWidth + "px" } }];
      }, Kt = function(e2, t2) {
        var n2 = t2.cell;
        return [e2, { style: { boxSizing: "border-box", flex: n2.column.totalFlexWidth + " 0 auto", minWidth: n2.column.totalMinWidth + "px", width: n2.column.totalWidth + "px" } }];
      }, Ut = function(e2, t2) {
        var n2 = t2.column;
        return [e2, { style: { boxSizing: "border-box", flex: n2.totalFlexWidth ? n2.totalFlexWidth + " 0 auto" : void 0, minWidth: n2.totalMinWidth + "px", width: n2.totalWidth + "px" } }];
      };
      function $t(e2) {
        e2.stateReducers.push(Zt), e2.getTableProps.push(Jt), e2.getHeaderProps.push(Yt), e2.getRowProps.push(Qt);
      }
      l.columnStartResizing = "columnStartResizing", l.columnResizing = "columnResizing", l.columnDoneResizing = "columnDoneResizing", l.resetResize = "resetResize", $t.pluginName = "useGridLayout";
      var Jt = function(e2, t2) {
        var n2 = t2.instance;
        return [e2, { style: { display: "grid", gridTemplateColumns: n2.visibleColumns.map(function(e3) {
          var t3;
          return n2.state.gridLayout.columnWidths[e3.id] ? n2.state.gridLayout.columnWidths[e3.id] + "px" : (null == (t3 = n2.state.columnResizing) ? void 0 : t3.isResizingColumn) ? n2.state.gridLayout.startWidths[e3.id] + "px" : "number" == typeof e3.width ? e3.width + "px" : e3.width;
        }).join(" ") } }];
      }, Yt = function(e2, t2) {
        var n2 = t2.column;
        return [e2, { id: "header-cell-" + n2.id, style: { position: "sticky", gridColumn: "span " + n2.totalVisibleHeaderCount } }];
      }, Qt = function(e2, t2) {
        var n2 = t2.row;
        return n2.isExpanded ? [e2, { style: { gridColumn: "1 / " + (n2.cells.length + 1) } }] : [e2, {}];
      };
      function Zt(e2, t2, n2, o2) {
        if (t2.type === l.init) return r({ gridLayout: { columnWidths: {} } }, e2);
        if (t2.type === l.resetResize) return r({}, e2, { gridLayout: { columnWidths: {} } });
        if (t2.type === l.columnStartResizing) {
          var i2 = t2.columnId, u2 = t2.headerIdWidths, s2 = en(i2);
          if (void 0 !== s2) {
            var a2 = o2.visibleColumns.reduce(function(e3, t3) {
              var n3;
              return r({}, e3, ((n3 = {})[t3.id] = en(t3.id), n3));
            }, {}), c2 = o2.visibleColumns.reduce(function(e3, t3) {
              var n3;
              return r({}, e3, ((n3 = {})[t3.id] = t3.minWidth, n3));
            }, {}), d2 = o2.visibleColumns.reduce(function(e3, t3) {
              var n3;
              return r({}, e3, ((n3 = {})[t3.id] = t3.maxWidth, n3));
            }, {}), f2 = u2.map(function(e3) {
              var t3 = e3[0];
              return [t3, en(t3)];
            });
            return r({}, e2, { gridLayout: r({}, e2.gridLayout, { startWidths: a2, minWidths: c2, maxWidths: d2, headerIdGridWidths: f2, columnWidth: s2 }) });
          }
          return e2;
        }
        if (t2.type === l.columnResizing) {
          var p2 = t2.clientX, g2 = e2.columnResizing.startX, v2 = e2.gridLayout, m2 = v2.columnWidth, h2 = v2.minWidths, y2 = v2.maxWidths, w2 = v2.headerIdGridWidths, R2 = (p2 - g2) / m2, b2 = {};
          return (void 0 === w2 ? [] : w2).forEach(function(e3) {
            var t3 = e3[0], n3 = e3[1];
            b2[t3] = Math.min(Math.max(h2[t3], n3 + n3 * R2), y2[t3]);
          }), r({}, e2, { gridLayout: r({}, e2.gridLayout, { columnWidths: r({}, e2.gridLayout.columnWidths, {}, b2) }) });
        }
        return t2.type === l.columnDoneResizing ? r({}, e2, { gridLayout: r({}, e2.gridLayout, { startWidths: {}, minWidths: {}, maxWidths: {} }) }) : void 0;
      }
      function en(e2) {
        var t2, n2 = null == (t2 = document.getElementById("header-cell-" + e2)) ? void 0 : t2.offsetWidth;
        if (void 0 !== n2) return n2;
      }
      e._UNSTABLE_usePivotColumns = nt, e.actions = l, e.defaultColumn = c, e.defaultGroupByFn = De, e.defaultOrderByFn = Qe, e.defaultRenderer = s, e.emptyRenderer = a, e.ensurePluginOrder = v, e.flexRender = b, e.functionalUpdate = m, e.loopHooks = g, e.makePropGetter = f, e.makeRenderer = R, e.reduceHooks = p, e.safeUseLayoutEffect = y, e.useAbsoluteLayout = Mt, e.useAsyncDebounce = function(e2, n2) {
        void 0 === n2 && (n2 = 0);
        var r2 = t.useRef({}), i2 = h(e2), u2 = h(n2);
        return t.useCallback(function() {
          var e3 = o(regeneratorRuntime.mark(function e4() {
            var t2, n3, l2, s2 = arguments;
            return regeneratorRuntime.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  for (t2 = s2.length, n3 = new Array(t2), l2 = 0; l2 < t2; l2++) n3[l2] = s2[l2];
                  return r2.current.promise || (r2.current.promise = new Promise(function(e6, t3) {
                    r2.current.resolve = e6, r2.current.reject = t3;
                  })), r2.current.timeout && clearTimeout(r2.current.timeout), r2.current.timeout = setTimeout(o(regeneratorRuntime.mark(function e6() {
                    return regeneratorRuntime.wrap(function(e7) {
                      for (; ; ) switch (e7.prev = e7.next) {
                        case 0:
                          return delete r2.current.timeout, e7.prev = 1, e7.t0 = r2.current, e7.next = 5, i2().apply(void 0, n3);
                        case 5:
                          e7.t1 = e7.sent, e7.t0.resolve.call(e7.t0, e7.t1), e7.next = 12;
                          break;
                        case 9:
                          e7.prev = 9, e7.t2 = e7.catch(1), r2.current.reject(e7.t2);
                        case 12:
                          return e7.prev = 12, delete r2.current.promise, e7.finish(12);
                        case 15:
                        case "end":
                          return e7.stop();
                      }
                    }, e6, null, [[1, 9, 12, 15]]);
                  })), u2()), e5.abrupt("return", r2.current.promise);
                case 5:
                case "end":
                  return e5.stop();
              }
            }, e4);
          }));
          return function() {
            return e3.apply(this, arguments);
          };
        }(), [i2, u2]);
      }, e.useBlockLayout = Dt, e.useColumnOrder = It, e.useExpanded = se, e.useFilters = Pe, e.useFlexLayout = Vt, e.useGetLatest = h, e.useGlobalFilter = Ie, e.useGridLayout = $t, e.useGroupBy = ze, e.useMountedLayoutEffect = w, e.usePagination = Ze, e.useResizeColumns = kt, e.useRowSelect = vt, e.useRowState = xt, e.useSortBy = Ue, e.useTable = function(e2) {
        for (var n2 = arguments.length, o2 = new Array(n2 > 1 ? n2 - 1 : 0), i2 = 1; i2 < n2; i2++) o2[i2 - 1] = arguments[i2];
        e2 = ie(e2), o2 = [K].concat(o2);
        var u2 = t.useRef({}), s2 = h(u2.current);
        Object.assign(s2(), r({}, e2, { plugins: o2, hooks: q() })), o2.filter(Boolean).forEach(function(e3) {
          e3(s2().hooks);
        });
        var a2 = h(s2().hooks);
        s2().getHooks = a2, delete s2().hooks, Object.assign(s2(), p(a2().useOptions, ie(e2)));
        var c2 = s2(), d2 = c2.data, v2 = c2.columns, m2 = c2.initialState, y2 = c2.defaultColumn, w2 = c2.getSubRows, b2 = c2.getRowId, E2 = c2.stateReducer, I2 = c2.useControlledState, F2 = h(E2), G2 = t.useCallback(function(e3, t2) {
          if (!t2.type) throw console.info({ action: t2 }), new Error("Unknown Action 👆");
          return [].concat(a2().stateReducers, Array.isArray(F2()) ? F2() : [F2()]).reduce(function(n3, o3) {
            return o3(n3, t2, e3, s2()) || n3;
          }, e3);
        }, [a2, F2, s2]), A2 = t.useReducer(G2, void 0, function() {
          return G2(m2, { type: l.init });
        }), k2 = A2[0], H2 = A2[1], W2 = p([].concat(a2().useControlledState, [I2]), k2, { instance: s2() });
        Object.assign(s2(), { state: W2, dispatch: H2 });
        var z2 = t.useMemo(function() {
          return S(p(a2().columns, v2, { instance: s2() }));
        }, [a2, s2, v2].concat(p(a2().columnsDeps, [], { instance: s2() })));
        s2().columns = z2;
        var T2 = t.useMemo(function() {
          return p(a2().allColumns, C(z2), { instance: s2() }).map(x);
        }, [z2, a2, s2].concat(p(a2().allColumnsDeps, [], { instance: s2() })));
        s2().allColumns = T2;
        var O2 = t.useMemo(function() {
          for (var e3 = [], t2 = [], n3 = {}, o3 = [].concat(T2); o3.length; ) {
            var r2 = o3.shift();
            le({ data: d2, rows: e3, flatRows: t2, rowsById: n3, column: r2, getRowId: b2, getSubRows: w2, accessValueHooks: a2().accessValue, getInstance: s2 });
          }
          return [e3, t2, n3];
        }, [T2, d2, b2, w2, a2, s2]), M2 = O2[0], j2 = O2[1], L2 = O2[2];
        Object.assign(s2(), { rows: M2, initialRows: [].concat(M2), flatRows: j2, rowsById: L2 }), g(a2().useInstanceAfterData, s2());
        var N2 = t.useMemo(function() {
          return p(a2().visibleColumns, T2, { instance: s2() }).map(function(e3) {
            return P(e3, y2);
          });
        }, [a2, T2, s2, y2].concat(p(a2().visibleColumnsDeps, [], { instance: s2() })));
        T2 = t.useMemo(function() {
          var e3 = [].concat(N2);
          return T2.forEach(function(t2) {
            e3.find(function(e4) {
              return e4.id === t2.id;
            }) || e3.push(t2);
          }), e3;
        }, [T2, N2]), s2().allColumns = T2;
        var D2 = t.useMemo(function() {
          return p(a2().headerGroups, B(N2, y2), s2());
        }, [a2, N2, y2, s2].concat(p(a2().headerGroupsDeps, [], { instance: s2() })));
        s2().headerGroups = D2;
        var V2 = t.useMemo(function() {
          return D2.length ? D2[0].headers : [];
        }, [D2]);
        s2().headers = V2, s2().flatHeaders = D2.reduce(function(e3, t2) {
          return [].concat(e3, t2.headers);
        }, []), g(a2().useInstanceBeforeDimensions, s2());
        var _2 = N2.filter(function(e3) {
          return e3.isVisible;
        }).map(function(e3) {
          return e3.id;
        }).sort().join("_");
        N2 = t.useMemo(function() {
          return N2.filter(function(e3) {
            return e3.isVisible;
          });
        }, [N2, _2]), s2().visibleColumns = N2;
        var X2 = ue(V2), U2 = X2[0], $2 = X2[1], J2 = X2[2];
        return s2().totalColumnsMinWidth = U2, s2().totalColumnsWidth = $2, s2().totalColumnsMaxWidth = J2, g(a2().useInstance, s2()), [].concat(s2().flatHeaders, s2().allColumns).forEach(function(e3) {
          e3.render = R(s2(), e3), e3.getHeaderProps = f(a2().getHeaderProps, { instance: s2(), column: e3 }), e3.getFooterProps = f(a2().getFooterProps, { instance: s2(), column: e3 });
        }), s2().headerGroups = t.useMemo(function() {
          return D2.filter(function(e3, t2) {
            return e3.headers = e3.headers.filter(function(e4) {
              return e4.headers ? function e5(t3) {
                return t3.filter(function(t4) {
                  return t4.headers ? e5(t4.headers) : t4.isVisible;
                }).length;
              }(e4.headers) : e4.isVisible;
            }), !!e3.headers.length && (e3.getHeaderGroupProps = f(a2().getHeaderGroupProps, { instance: s2(), headerGroup: e3, index: t2 }), e3.getFooterGroupProps = f(a2().getFooterGroupProps, { instance: s2(), headerGroup: e3, index: t2 }), true);
          });
        }, [D2, s2, a2]), s2().footerGroups = [].concat(s2().headerGroups).reverse(), s2().prepareRow = t.useCallback(function(e3) {
          e3.getRowProps = f(a2().getRowProps, { instance: s2(), row: e3 }), e3.allCells = T2.map(function(t2) {
            var n3 = e3.values[t2.id], o3 = { column: t2, row: e3, value: n3 };
            return o3.getCellProps = f(a2().getCellProps, { instance: s2(), cell: o3 }), o3.render = R(s2(), t2, { row: e3, cell: o3, value: n3 }), o3;
          }), e3.cells = N2.map(function(t2) {
            return e3.allCells.find(function(e4) {
              return e4.column.id === t2.id;
            });
          }), g(a2().prepareRow, e3, { instance: s2() });
        }, [a2, s2, T2, N2]), s2().getTableProps = f(a2().getTableProps, { instance: s2() }), s2().getTableBodyProps = f(a2().getTableBodyProps, { instance: s2() }), g(a2().useFinalInstance, s2()), s2();
      }, Object.defineProperty(e, "__esModule", { value: true });
    });
  }
});

// node_modules/react-table/dist/react-table.development.js
var require_react_table_development = __commonJS({
  "node_modules/react-table/dist/react-table.development.js"(exports, module) {
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_react()) : typeof define === "function" && define.amd ? define(["exports", "react"], factory) : (global = global || self, factory(global.ReactTable = {}, global.React));
    })(exports, function(exports2, React) {
      "use strict";
      React = React && Object.prototype.hasOwnProperty.call(React, "default") ? React["default"] : React;
      function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          Promise.resolve(value).then(_next, _throw);
        }
      }
      function _asyncToGenerator(fn) {
        return function() {
          var self2 = this, args = arguments;
          return new Promise(function(resolve, reject) {
            var gen = fn.apply(self2, args);
            function _next(value) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(void 0);
          });
        };
      }
      function _extends() {
        _extends = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends.apply(this, arguments);
      }
      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
        return target;
      }
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null) return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object") return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      var renderErr = "Renderer Error ☝️";
      var actions = {
        init: "init"
      };
      var defaultRenderer = function defaultRenderer2(_ref) {
        var _ref$value = _ref.value, value = _ref$value === void 0 ? "" : _ref$value;
        return value;
      };
      var emptyRenderer = function emptyRenderer2() {
        return React.createElement(React.Fragment, null, " ");
      };
      var defaultColumn = {
        Cell: defaultRenderer,
        width: 150,
        minWidth: 0,
        maxWidth: Number.MAX_SAFE_INTEGER
      };
      function mergeProps() {
        for (var _len = arguments.length, propList = new Array(_len), _key = 0; _key < _len; _key++) {
          propList[_key] = arguments[_key];
        }
        return propList.reduce(function(props, next) {
          var style = next.style, className = next.className, rest = _objectWithoutPropertiesLoose(next, ["style", "className"]);
          props = _extends({}, props, {}, rest);
          if (style) {
            props.style = props.style ? _extends({}, props.style || {}, {}, style || {}) : style;
          }
          if (className) {
            props.className = props.className ? props.className + " " + className : className;
          }
          if (props.className === "") {
            delete props.className;
          }
          return props;
        }, {});
      }
      function handlePropGetter(prevProps, userProps, meta) {
        if (typeof userProps === "function") {
          return handlePropGetter({}, userProps(prevProps, meta));
        }
        if (Array.isArray(userProps)) {
          return mergeProps.apply(void 0, [prevProps].concat(userProps));
        }
        return mergeProps(prevProps, userProps);
      }
      var makePropGetter = function makePropGetter2(hooks, meta) {
        if (meta === void 0) {
          meta = {};
        }
        return function(userProps) {
          if (userProps === void 0) {
            userProps = {};
          }
          return [].concat(hooks, [userProps]).reduce(function(prev, next) {
            return handlePropGetter(prev, next, _extends({}, meta, {
              userProps
            }));
          }, {});
        };
      };
      var reduceHooks = function reduceHooks2(hooks, initial, meta, allowUndefined) {
        if (meta === void 0) {
          meta = {};
        }
        return hooks.reduce(function(prev, next) {
          var nextValue = next(prev, meta);
          {
            if (!allowUndefined && typeof nextValue === "undefined") {
              console.info(next);
              throw new Error("React Table: A reducer hook ☝️ just returned undefined! This is not allowed.");
            }
          }
          return nextValue;
        }, initial);
      };
      var loopHooks = function loopHooks2(hooks, context, meta) {
        if (meta === void 0) {
          meta = {};
        }
        return hooks.forEach(function(hook) {
          var nextValue = hook(context, meta);
          {
            if (typeof nextValue !== "undefined") {
              console.info(hook, nextValue);
              throw new Error("React Table: A loop-type hook ☝️ just returned a value! This is not allowed.");
            }
          }
        });
      };
      function ensurePluginOrder(plugins, befores, pluginName2, afters) {
        if (afters) {
          throw new Error('Defining plugins in the "after" section of ensurePluginOrder is no longer supported (see plugin ' + pluginName2 + ")");
        }
        var pluginIndex = plugins.findIndex(function(plugin) {
          return plugin.pluginName === pluginName2;
        });
        if (pluginIndex === -1) {
          {
            throw new Error('The plugin "' + pluginName2 + `" was not found in the plugin list!
This usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:

  ` + pluginName2 + ".pluginName = '" + pluginName2 + "'\n");
          }
        }
        befores.forEach(function(before) {
          var beforeIndex = plugins.findIndex(function(plugin) {
            return plugin.pluginName === before;
          });
          if (beforeIndex > -1 && beforeIndex > pluginIndex) {
            {
              throw new Error("React Table: The " + pluginName2 + " plugin hook must be placed after the " + before + " plugin hook!");
            }
          }
        });
      }
      function functionalUpdate(updater, old) {
        return typeof updater === "function" ? updater(old) : updater;
      }
      function useGetLatest(obj) {
        var ref = React.useRef();
        ref.current = obj;
        return React.useCallback(function() {
          return ref.current;
        }, []);
      }
      var safeUseLayoutEffect = typeof document !== "undefined" ? React.useLayoutEffect : React.useEffect;
      function useMountedLayoutEffect(fn, deps) {
        var mountedRef = React.useRef(false);
        safeUseLayoutEffect(function() {
          if (mountedRef.current) {
            fn();
          }
          mountedRef.current = true;
        }, deps);
      }
      function useAsyncDebounce(defaultFn, defaultWait) {
        if (defaultWait === void 0) {
          defaultWait = 0;
        }
        var debounceRef = React.useRef({});
        var getDefaultFn = useGetLatest(defaultFn);
        var getDefaultWait = useGetLatest(defaultWait);
        return React.useCallback(
          function() {
            var _ref2 = _asyncToGenerator(
              regeneratorRuntime.mark(function _callee2() {
                var _len2, args, _key2, _args2 = arguments;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                          args[_key2] = _args2[_key2];
                        }
                        if (!debounceRef.current.promise) {
                          debounceRef.current.promise = new Promise(function(resolve, reject) {
                            debounceRef.current.resolve = resolve;
                            debounceRef.current.reject = reject;
                          });
                        }
                        if (debounceRef.current.timeout) {
                          clearTimeout(debounceRef.current.timeout);
                        }
                        debounceRef.current.timeout = setTimeout(
                          _asyncToGenerator(
                            regeneratorRuntime.mark(function _callee() {
                              return regeneratorRuntime.wrap(function _callee$(_context) {
                                while (1) {
                                  switch (_context.prev = _context.next) {
                                    case 0:
                                      delete debounceRef.current.timeout;
                                      _context.prev = 1;
                                      _context.t0 = debounceRef.current;
                                      _context.next = 5;
                                      return getDefaultFn().apply(void 0, args);
                                    case 5:
                                      _context.t1 = _context.sent;
                                      _context.t0.resolve.call(_context.t0, _context.t1);
                                      _context.next = 12;
                                      break;
                                    case 9:
                                      _context.prev = 9;
                                      _context.t2 = _context["catch"](1);
                                      debounceRef.current.reject(_context.t2);
                                    case 12:
                                      _context.prev = 12;
                                      delete debounceRef.current.promise;
                                      return _context.finish(12);
                                    case 15:
                                    case "end":
                                      return _context.stop();
                                  }
                                }
                              }, _callee, null, [[1, 9, 12, 15]]);
                            })
                          ),
                          getDefaultWait()
                        );
                        return _context2.abrupt("return", debounceRef.current.promise);
                      case 5:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              })
            );
            return function() {
              return _ref2.apply(this, arguments);
            };
          }(),
          [getDefaultFn, getDefaultWait]
        );
      }
      function makeRenderer(instance, column, meta) {
        if (meta === void 0) {
          meta = {};
        }
        return function(type, userProps) {
          if (userProps === void 0) {
            userProps = {};
          }
          var Comp = typeof type === "string" ? column[type] : type;
          if (typeof Comp === "undefined") {
            console.info(column);
            throw new Error(renderErr);
          }
          return flexRender(Comp, _extends({}, instance, {
            column
          }, meta, {}, userProps));
        };
      }
      function flexRender(Comp, props) {
        return isReactComponent(Comp) ? React.createElement(Comp, props) : Comp;
      }
      function isReactComponent(component) {
        return isClassComponent(component) || typeof component === "function" || isExoticComponent(component);
      }
      function isClassComponent(component) {
        return typeof component === "function" && function() {
          var proto = Object.getPrototypeOf(component);
          return proto.prototype && proto.prototype.isReactComponent;
        }();
      }
      function isExoticComponent(component) {
        return typeof component === "object" && typeof component.$$typeof === "symbol" && ["react.memo", "react.forward_ref"].includes(component.$$typeof.description);
      }
      function linkColumnStructure(columns, parent, depth) {
        if (depth === void 0) {
          depth = 0;
        }
        return columns.map(function(column) {
          column = _extends({}, column, {
            parent,
            depth
          });
          assignColumnAccessor(column);
          if (column.columns) {
            column.columns = linkColumnStructure(column.columns, column, depth + 1);
          }
          return column;
        });
      }
      function flattenColumns(columns) {
        return flattenBy(columns, "columns");
      }
      function assignColumnAccessor(column) {
        var id = column.id, accessor = column.accessor, Header = column.Header;
        if (typeof accessor === "string") {
          id = id || accessor;
          var accessorPath = accessor.split(".");
          accessor = function accessor2(row) {
            return getBy(row, accessorPath);
          };
        }
        if (!id && typeof Header === "string" && Header) {
          id = Header;
        }
        if (!id && column.columns) {
          console.error(column);
          throw new Error('A column ID (or unique "Header" value) is required!');
        }
        if (!id) {
          console.error(column);
          throw new Error("A column ID (or string accessor) is required!");
        }
        Object.assign(column, {
          id,
          accessor
        });
        return column;
      }
      function decorateColumn(column, userDefaultColumn) {
        if (!userDefaultColumn) {
          throw new Error();
        }
        Object.assign(column, _extends({
          // Make sure there is a fallback header, just in case
          Header: emptyRenderer,
          Footer: emptyRenderer
        }, defaultColumn, {}, userDefaultColumn, {}, column));
        Object.assign(column, {
          originalWidth: column.width
        });
        return column;
      }
      function makeHeaderGroups(allColumns2, defaultColumn2, additionalHeaderProperties) {
        if (additionalHeaderProperties === void 0) {
          additionalHeaderProperties = function additionalHeaderProperties2() {
            return {};
          };
        }
        var headerGroups = [];
        var scanColumns = allColumns2;
        var uid = 0;
        var getUID = function getUID2() {
          return uid++;
        };
        var _loop = function _loop2() {
          var headerGroup = {
            headers: []
          };
          var parentColumns = [];
          var hasParents = scanColumns.some(function(d) {
            return d.parent;
          });
          scanColumns.forEach(function(column) {
            var latestParentColumn = [].concat(parentColumns).reverse()[0];
            var newParent;
            if (hasParents) {
              if (column.parent) {
                newParent = _extends({}, column.parent, {
                  originalId: column.parent.id,
                  id: column.parent.id + "_" + getUID(),
                  headers: [column]
                }, additionalHeaderProperties(column));
              } else {
                var originalId = column.id + "_placeholder";
                newParent = decorateColumn(_extends({
                  originalId,
                  id: column.id + "_placeholder_" + getUID(),
                  placeholderOf: column,
                  headers: [column]
                }, additionalHeaderProperties(column)), defaultColumn2);
              }
              if (latestParentColumn && latestParentColumn.originalId === newParent.originalId) {
                latestParentColumn.headers.push(column);
              } else {
                parentColumns.push(newParent);
              }
            }
            headerGroup.headers.push(column);
          });
          headerGroups.push(headerGroup);
          scanColumns = parentColumns;
        };
        while (scanColumns.length) {
          _loop();
        }
        return headerGroups.reverse();
      }
      var pathObjCache = /* @__PURE__ */ new Map();
      function getBy(obj, path, def) {
        if (!path) {
          return obj;
        }
        var cacheKey = typeof path === "function" ? path : JSON.stringify(path);
        var pathObj = pathObjCache.get(cacheKey) || function() {
          var pathObj2 = makePathArray(path);
          pathObjCache.set(cacheKey, pathObj2);
          return pathObj2;
        }();
        var val;
        try {
          val = pathObj.reduce(function(cursor, pathPart) {
            return cursor[pathPart];
          }, obj);
        } catch (e) {
        }
        return typeof val !== "undefined" ? val : def;
      }
      function getFirstDefined() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        for (var i = 0; i < args.length; i += 1) {
          if (typeof args[i] !== "undefined") {
            return args[i];
          }
        }
      }
      function isFunction(a) {
        if (typeof a === "function") {
          return a;
        }
      }
      function flattenBy(arr, key) {
        var flat = [];
        var recurse = function recurse2(arr2) {
          arr2.forEach(function(d) {
            if (!d[key]) {
              flat.push(d);
            } else {
              recurse2(d[key]);
            }
          });
        };
        recurse(arr);
        return flat;
      }
      function expandRows(rows, _ref) {
        var manualExpandedKey = _ref.manualExpandedKey, expanded = _ref.expanded, _ref$expandSubRows = _ref.expandSubRows, expandSubRows = _ref$expandSubRows === void 0 ? true : _ref$expandSubRows;
        var expandedRows = [];
        var handleRow = function handleRow2(row, addToExpandedRows) {
          if (addToExpandedRows === void 0) {
            addToExpandedRows = true;
          }
          row.isExpanded = row.original && row.original[manualExpandedKey] || expanded[row.id];
          row.canExpand = row.subRows && !!row.subRows.length;
          if (addToExpandedRows) {
            expandedRows.push(row);
          }
          if (row.subRows && row.subRows.length && row.isExpanded) {
            row.subRows.forEach(function(row2) {
              return handleRow2(row2, expandSubRows);
            });
          }
        };
        rows.forEach(function(row) {
          return handleRow(row);
        });
        return expandedRows;
      }
      function getFilterMethod(filter, userFilterTypes, filterTypes2) {
        return isFunction(filter) || userFilterTypes[filter] || filterTypes2[filter] || filterTypes2.text;
      }
      function shouldAutoRemoveFilter(autoRemove, value, column) {
        return autoRemove ? autoRemove(value, column) : typeof value === "undefined";
      }
      function unpreparedAccessWarning() {
        throw new Error("React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.");
      }
      var passiveSupported = null;
      function passiveEventSupported() {
        if (typeof passiveSupported === "boolean") return passiveSupported;
        var supported = false;
        try {
          var options = {
            get passive() {
              supported = true;
              return false;
            }
          };
          window.addEventListener("test", null, options);
          window.removeEventListener("test", null, options);
        } catch (err) {
          supported = false;
        }
        passiveSupported = supported;
        return passiveSupported;
      }
      var reOpenBracket = /\[/g;
      var reCloseBracket = /\]/g;
      function makePathArray(obj) {
        return flattenDeep(obj).map(function(d) {
          return String(d).replace(".", "_");
        }).join(".").replace(reOpenBracket, ".").replace(reCloseBracket, "").split(".");
      }
      function flattenDeep(arr, newArr) {
        if (newArr === void 0) {
          newArr = [];
        }
        if (!Array.isArray(arr)) {
          newArr.push(arr);
        } else {
          for (var i = 0; i < arr.length; i += 1) {
            flattenDeep(arr[i], newArr);
          }
        }
        return newArr;
      }
      var defaultGetTableProps = function defaultGetTableProps2(props) {
        return _extends({
          role: "table"
        }, props);
      };
      var defaultGetTableBodyProps = function defaultGetTableBodyProps2(props) {
        return _extends({
          role: "rowgroup"
        }, props);
      };
      var defaultGetHeaderProps = function defaultGetHeaderProps2(props, _ref) {
        var column = _ref.column;
        return _extends({
          key: "header_" + column.id,
          colSpan: column.totalVisibleHeaderCount,
          role: "columnheader"
        }, props);
      };
      var defaultGetFooterProps = function defaultGetFooterProps2(props, _ref2) {
        var column = _ref2.column;
        return _extends({
          key: "footer_" + column.id,
          colSpan: column.totalVisibleHeaderCount
        }, props);
      };
      var defaultGetHeaderGroupProps = function defaultGetHeaderGroupProps2(props, _ref3) {
        var index = _ref3.index;
        return _extends({
          key: "headerGroup_" + index,
          role: "row"
        }, props);
      };
      var defaultGetFooterGroupProps = function defaultGetFooterGroupProps2(props, _ref4) {
        var index = _ref4.index;
        return _extends({
          key: "footerGroup_" + index
        }, props);
      };
      var defaultGetRowProps = function defaultGetRowProps2(props, _ref5) {
        var row = _ref5.row;
        return _extends({
          key: "row_" + row.id,
          role: "row"
        }, props);
      };
      var defaultGetCellProps = function defaultGetCellProps2(props, _ref6) {
        var cell = _ref6.cell;
        return _extends({
          key: "cell_" + cell.row.id + "_" + cell.column.id,
          role: "cell"
        }, props);
      };
      function makeDefaultPluginHooks() {
        return {
          useOptions: [],
          stateReducers: [],
          useControlledState: [],
          columns: [],
          columnsDeps: [],
          allColumns: [],
          allColumnsDeps: [],
          accessValue: [],
          materializedColumns: [],
          materializedColumnsDeps: [],
          useInstanceAfterData: [],
          visibleColumns: [],
          visibleColumnsDeps: [],
          headerGroups: [],
          headerGroupsDeps: [],
          useInstanceBeforeDimensions: [],
          useInstance: [],
          prepareRow: [],
          getTableProps: [defaultGetTableProps],
          getTableBodyProps: [defaultGetTableBodyProps],
          getHeaderGroupProps: [defaultGetHeaderGroupProps],
          getFooterGroupProps: [defaultGetFooterGroupProps],
          getHeaderProps: [defaultGetHeaderProps],
          getFooterProps: [defaultGetFooterProps],
          getRowProps: [defaultGetRowProps],
          getCellProps: [defaultGetCellProps],
          useFinalInstance: []
        };
      }
      actions.resetHiddenColumns = "resetHiddenColumns";
      actions.toggleHideColumn = "toggleHideColumn";
      actions.setHiddenColumns = "setHiddenColumns";
      actions.toggleHideAllColumns = "toggleHideAllColumns";
      var useColumnVisibility = function useColumnVisibility2(hooks) {
        hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps];
        hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps];
        hooks.stateReducers.push(reducer);
        hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions);
        hooks.headerGroupsDeps.push(function(deps, _ref) {
          var instance = _ref.instance;
          return [].concat(deps, [instance.state.hiddenColumns]);
        });
        hooks.useInstance.push(useInstance);
      };
      useColumnVisibility.pluginName = "useColumnVisibility";
      var defaultGetToggleHiddenProps = function defaultGetToggleHiddenProps2(props, _ref2) {
        var column = _ref2.column;
        return [props, {
          onChange: function onChange(e) {
            column.toggleHidden(!e.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: column.isVisible,
          title: "Toggle Column Visible"
        }];
      };
      var defaultGetToggleHideAllColumnsProps = function defaultGetToggleHideAllColumnsProps2(props, _ref3) {
        var instance = _ref3.instance;
        return [props, {
          onChange: function onChange(e) {
            instance.toggleHideAllColumns(!e.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,
          title: "Toggle All Columns Hidden",
          indeterminate: !instance.allColumnsHidden && instance.state.hiddenColumns.length
        }];
      };
      function reducer(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            hiddenColumns: []
          }, state);
        }
        if (action.type === actions.resetHiddenColumns) {
          return _extends({}, state, {
            hiddenColumns: instance.initialState.hiddenColumns || []
          });
        }
        if (action.type === actions.toggleHideColumn) {
          var should = typeof action.value !== "undefined" ? action.value : !state.hiddenColumns.includes(action.columnId);
          var hiddenColumns = should ? [].concat(state.hiddenColumns, [action.columnId]) : state.hiddenColumns.filter(function(d) {
            return d !== action.columnId;
          });
          return _extends({}, state, {
            hiddenColumns
          });
        }
        if (action.type === actions.setHiddenColumns) {
          return _extends({}, state, {
            hiddenColumns: functionalUpdate(action.value, state.hiddenColumns)
          });
        }
        if (action.type === actions.toggleHideAllColumns) {
          var shouldAll = typeof action.value !== "undefined" ? action.value : !state.hiddenColumns.length;
          return _extends({}, state, {
            hiddenColumns: shouldAll ? instance.allColumns.map(function(d) {
              return d.id;
            }) : []
          });
        }
      }
      function useInstanceBeforeDimensions(instance) {
        var headers = instance.headers, hiddenColumns = instance.state.hiddenColumns;
        var isMountedRef = React.useRef(false);
        if (!isMountedRef.current) ;
        var handleColumn = function handleColumn2(column, parentVisible) {
          column.isVisible = parentVisible && !hiddenColumns.includes(column.id);
          var totalVisibleHeaderCount2 = 0;
          if (column.headers && column.headers.length) {
            column.headers.forEach(function(subColumn) {
              return totalVisibleHeaderCount2 += handleColumn2(subColumn, column.isVisible);
            });
          } else {
            totalVisibleHeaderCount2 = column.isVisible ? 1 : 0;
          }
          column.totalVisibleHeaderCount = totalVisibleHeaderCount2;
          return totalVisibleHeaderCount2;
        };
        var totalVisibleHeaderCount = 0;
        headers.forEach(function(subHeader) {
          return totalVisibleHeaderCount += handleColumn(subHeader, true);
        });
      }
      function useInstance(instance) {
        var columns = instance.columns, flatHeaders = instance.flatHeaders, dispatch = instance.dispatch, allColumns2 = instance.allColumns, getHooks = instance.getHooks, hiddenColumns = instance.state.hiddenColumns, _instance$autoResetHi = instance.autoResetHiddenColumns, autoResetHiddenColumns = _instance$autoResetHi === void 0 ? true : _instance$autoResetHi;
        var getInstance = useGetLatest(instance);
        var allColumnsHidden = allColumns2.length === hiddenColumns.length;
        var toggleHideColumn = React.useCallback(function(columnId, value) {
          return dispatch({
            type: actions.toggleHideColumn,
            columnId,
            value
          });
        }, [dispatch]);
        var setHiddenColumns = React.useCallback(function(value) {
          return dispatch({
            type: actions.setHiddenColumns,
            value
          });
        }, [dispatch]);
        var toggleHideAllColumns = React.useCallback(function(value) {
          return dispatch({
            type: actions.toggleHideAllColumns,
            value
          });
        }, [dispatch]);
        var getToggleHideAllColumnsProps = makePropGetter(getHooks().getToggleHideAllColumnsProps, {
          instance: getInstance()
        });
        flatHeaders.forEach(function(column) {
          column.toggleHidden = function(value) {
            dispatch({
              type: actions.toggleHideColumn,
              columnId: column.id,
              value
            });
          };
          column.getToggleHiddenProps = makePropGetter(getHooks().getToggleHiddenProps, {
            instance: getInstance(),
            column
          });
        });
        var getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns);
        useMountedLayoutEffect(function() {
          if (getAutoResetHiddenColumns()) {
            dispatch({
              type: actions.resetHiddenColumns
            });
          }
        }, [dispatch, columns]);
        Object.assign(instance, {
          allColumnsHidden,
          toggleHideColumn,
          setHiddenColumns,
          toggleHideAllColumns,
          getToggleHideAllColumnsProps
        });
      }
      var defaultInitialState = {};
      var defaultColumnInstance = {};
      var defaultReducer = function defaultReducer2(state, action, prevState) {
        return state;
      };
      var defaultGetSubRows = function defaultGetSubRows2(row, index) {
        return row.subRows || [];
      };
      var defaultGetRowId = function defaultGetRowId2(row, index, parent) {
        return "" + (parent ? [parent.id, index].join(".") : index);
      };
      var defaultUseControlledState = function defaultUseControlledState2(d) {
        return d;
      };
      function applyDefaults(props) {
        var _props$initialState = props.initialState, initialState = _props$initialState === void 0 ? defaultInitialState : _props$initialState, _props$defaultColumn = props.defaultColumn, defaultColumn2 = _props$defaultColumn === void 0 ? defaultColumnInstance : _props$defaultColumn, _props$getSubRows = props.getSubRows, getSubRows = _props$getSubRows === void 0 ? defaultGetSubRows : _props$getSubRows, _props$getRowId = props.getRowId, getRowId = _props$getRowId === void 0 ? defaultGetRowId : _props$getRowId, _props$stateReducer = props.stateReducer, stateReducer = _props$stateReducer === void 0 ? defaultReducer : _props$stateReducer, _props$useControlledS = props.useControlledState, useControlledState = _props$useControlledS === void 0 ? defaultUseControlledState : _props$useControlledS, rest = _objectWithoutPropertiesLoose(props, ["initialState", "defaultColumn", "getSubRows", "getRowId", "stateReducer", "useControlledState"]);
        return _extends({}, rest, {
          initialState,
          defaultColumn: defaultColumn2,
          getSubRows,
          getRowId,
          stateReducer,
          useControlledState
        });
      }
      var useTable = function useTable2(props) {
        for (var _len = arguments.length, plugins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          plugins[_key - 1] = arguments[_key];
        }
        props = applyDefaults(props);
        plugins = [useColumnVisibility].concat(plugins);
        var instanceRef = React.useRef({});
        var getInstance = useGetLatest(instanceRef.current);
        Object.assign(getInstance(), _extends({}, props, {
          plugins,
          hooks: makeDefaultPluginHooks()
        }));
        plugins.filter(Boolean).forEach(function(plugin) {
          plugin(getInstance().hooks);
        });
        var getHooks = useGetLatest(getInstance().hooks);
        getInstance().getHooks = getHooks;
        delete getInstance().hooks;
        Object.assign(getInstance(), reduceHooks(getHooks().useOptions, applyDefaults(props)));
        var _getInstance = getInstance(), data = _getInstance.data, userColumns = _getInstance.columns, initialState = _getInstance.initialState, defaultColumn2 = _getInstance.defaultColumn, getSubRows = _getInstance.getSubRows, getRowId = _getInstance.getRowId, stateReducer = _getInstance.stateReducer, useControlledState = _getInstance.useControlledState;
        var getStateReducer = useGetLatest(stateReducer);
        var reducer2 = React.useCallback(function(state2, action) {
          if (!action.type) {
            console.info({
              action
            });
            throw new Error("Unknown Action 👆");
          }
          return [].concat(getHooks().stateReducers, Array.isArray(getStateReducer()) ? getStateReducer() : [getStateReducer()]).reduce(function(s, handler) {
            return handler(s, action, state2, getInstance()) || s;
          }, state2);
        }, [getHooks, getStateReducer, getInstance]);
        var _React$useReducer = React.useReducer(reducer2, void 0, function() {
          return reducer2(initialState, {
            type: actions.init
          });
        }), reducerState = _React$useReducer[0], dispatch = _React$useReducer[1];
        var state = reduceHooks([].concat(getHooks().useControlledState, [useControlledState]), reducerState, {
          instance: getInstance()
        });
        Object.assign(getInstance(), {
          state,
          dispatch
        });
        var columns = React.useMemo(function() {
          return linkColumnStructure(reduceHooks(getHooks().columns, userColumns, {
            instance: getInstance()
          }));
        }, [getHooks, getInstance, userColumns].concat(reduceHooks(getHooks().columnsDeps, [], {
          instance: getInstance()
        })));
        getInstance().columns = columns;
        var allColumns2 = React.useMemo(function() {
          return reduceHooks(getHooks().allColumns, flattenColumns(columns), {
            instance: getInstance()
          }).map(assignColumnAccessor);
        }, [columns, getHooks, getInstance].concat(reduceHooks(getHooks().allColumnsDeps, [], {
          instance: getInstance()
        })));
        getInstance().allColumns = allColumns2;
        var _React$useMemo = React.useMemo(function() {
          var rows2 = [];
          var flatRows2 = [];
          var rowsById2 = {};
          var allColumnsQueue = [].concat(allColumns2);
          while (allColumnsQueue.length) {
            var column = allColumnsQueue.shift();
            accessRowsForColumn({
              data,
              rows: rows2,
              flatRows: flatRows2,
              rowsById: rowsById2,
              column,
              getRowId,
              getSubRows,
              accessValueHooks: getHooks().accessValue,
              getInstance
            });
          }
          return [rows2, flatRows2, rowsById2];
        }, [allColumns2, data, getRowId, getSubRows, getHooks, getInstance]), rows = _React$useMemo[0], flatRows = _React$useMemo[1], rowsById = _React$useMemo[2];
        Object.assign(getInstance(), {
          rows,
          initialRows: [].concat(rows),
          flatRows,
          rowsById
          // materializedColumns,
        });
        loopHooks(getHooks().useInstanceAfterData, getInstance());
        var visibleColumns2 = React.useMemo(function() {
          return reduceHooks(getHooks().visibleColumns, allColumns2, {
            instance: getInstance()
          }).map(function(d) {
            return decorateColumn(d, defaultColumn2);
          });
        }, [getHooks, allColumns2, getInstance, defaultColumn2].concat(reduceHooks(getHooks().visibleColumnsDeps, [], {
          instance: getInstance()
        })));
        allColumns2 = React.useMemo(function() {
          var columns2 = [].concat(visibleColumns2);
          allColumns2.forEach(function(column) {
            if (!columns2.find(function(d) {
              return d.id === column.id;
            })) {
              columns2.push(column);
            }
          });
          return columns2;
        }, [allColumns2, visibleColumns2]);
        getInstance().allColumns = allColumns2;
        {
          var duplicateColumns = allColumns2.filter(function(column, i) {
            return allColumns2.findIndex(function(d) {
              return d.id === column.id;
            }) !== i;
          });
          if (duplicateColumns.length) {
            console.info(allColumns2);
            throw new Error('Duplicate columns were found with ids: "' + duplicateColumns.map(function(d) {
              return d.id;
            }).join(", ") + '" in the columns array above');
          }
        }
        var headerGroups = React.useMemo(function() {
          return reduceHooks(getHooks().headerGroups, makeHeaderGroups(visibleColumns2, defaultColumn2), getInstance());
        }, [getHooks, visibleColumns2, defaultColumn2, getInstance].concat(reduceHooks(getHooks().headerGroupsDeps, [], {
          instance: getInstance()
        })));
        getInstance().headerGroups = headerGroups;
        var headers = React.useMemo(function() {
          return headerGroups.length ? headerGroups[0].headers : [];
        }, [headerGroups]);
        getInstance().headers = headers;
        getInstance().flatHeaders = headerGroups.reduce(function(all, headerGroup) {
          return [].concat(all, headerGroup.headers);
        }, []);
        loopHooks(getHooks().useInstanceBeforeDimensions, getInstance());
        var visibleColumnsDep = visibleColumns2.filter(function(d) {
          return d.isVisible;
        }).map(function(d) {
          return d.id;
        }).sort().join("_");
        visibleColumns2 = React.useMemo(
          function() {
            return visibleColumns2.filter(function(d) {
              return d.isVisible;
            });
          },
          // eslint-disable-next-line react-hooks/exhaustive-deps
          [visibleColumns2, visibleColumnsDep]
        );
        getInstance().visibleColumns = visibleColumns2;
        var _calculateHeaderWidth = calculateHeaderWidths(headers), totalColumnsMinWidth = _calculateHeaderWidth[0], totalColumnsWidth = _calculateHeaderWidth[1], totalColumnsMaxWidth = _calculateHeaderWidth[2];
        getInstance().totalColumnsMinWidth = totalColumnsMinWidth;
        getInstance().totalColumnsWidth = totalColumnsWidth;
        getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth;
        loopHooks(getHooks().useInstance, getInstance());
        [].concat(getInstance().flatHeaders, getInstance().allColumns).forEach(function(column) {
          column.render = makeRenderer(getInstance(), column);
          column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {
            instance: getInstance(),
            column
          });
          column.getFooterProps = makePropGetter(getHooks().getFooterProps, {
            instance: getInstance(),
            column
          });
        });
        getInstance().headerGroups = React.useMemo(function() {
          return headerGroups.filter(function(headerGroup, i) {
            headerGroup.headers = headerGroup.headers.filter(function(column) {
              var recurse = function recurse2(headers2) {
                return headers2.filter(function(column2) {
                  if (column2.headers) {
                    return recurse2(column2.headers);
                  }
                  return column2.isVisible;
                }).length;
              };
              if (column.headers) {
                return recurse(column.headers);
              }
              return column.isVisible;
            });
            if (headerGroup.headers.length) {
              headerGroup.getHeaderGroupProps = makePropGetter(getHooks().getHeaderGroupProps, {
                instance: getInstance(),
                headerGroup,
                index: i
              });
              headerGroup.getFooterGroupProps = makePropGetter(getHooks().getFooterGroupProps, {
                instance: getInstance(),
                headerGroup,
                index: i
              });
              return true;
            }
            return false;
          });
        }, [headerGroups, getInstance, getHooks]);
        getInstance().footerGroups = [].concat(getInstance().headerGroups).reverse();
        getInstance().prepareRow = React.useCallback(function(row) {
          row.getRowProps = makePropGetter(getHooks().getRowProps, {
            instance: getInstance(),
            row
          });
          row.allCells = allColumns2.map(function(column) {
            var value = row.values[column.id];
            var cell = {
              column,
              row,
              value
            };
            cell.getCellProps = makePropGetter(getHooks().getCellProps, {
              instance: getInstance(),
              cell
            });
            cell.render = makeRenderer(getInstance(), column, {
              row,
              cell,
              value
            });
            return cell;
          });
          row.cells = visibleColumns2.map(function(column) {
            return row.allCells.find(function(cell) {
              return cell.column.id === column.id;
            });
          });
          loopHooks(getHooks().prepareRow, row, {
            instance: getInstance()
          });
        }, [getHooks, getInstance, allColumns2, visibleColumns2]);
        getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {
          instance: getInstance()
        });
        getInstance().getTableBodyProps = makePropGetter(getHooks().getTableBodyProps, {
          instance: getInstance()
        });
        loopHooks(getHooks().useFinalInstance, getInstance());
        return getInstance();
      };
      function calculateHeaderWidths(headers, left) {
        if (left === void 0) {
          left = 0;
        }
        var sumTotalMinWidth = 0;
        var sumTotalWidth = 0;
        var sumTotalMaxWidth = 0;
        var sumTotalFlexWidth = 0;
        headers.forEach(function(header) {
          var subHeaders = header.headers;
          header.totalLeft = left;
          if (subHeaders && subHeaders.length) {
            var _calculateHeaderWidth2 = calculateHeaderWidths(subHeaders, left), totalMinWidth = _calculateHeaderWidth2[0], totalWidth = _calculateHeaderWidth2[1], totalMaxWidth = _calculateHeaderWidth2[2], totalFlexWidth = _calculateHeaderWidth2[3];
            header.totalMinWidth = totalMinWidth;
            header.totalWidth = totalWidth;
            header.totalMaxWidth = totalMaxWidth;
            header.totalFlexWidth = totalFlexWidth;
          } else {
            header.totalMinWidth = header.minWidth;
            header.totalWidth = Math.min(Math.max(header.minWidth, header.width), header.maxWidth);
            header.totalMaxWidth = header.maxWidth;
            header.totalFlexWidth = header.canResize ? header.totalWidth : 0;
          }
          if (header.isVisible) {
            left += header.totalWidth;
            sumTotalMinWidth += header.totalMinWidth;
            sumTotalWidth += header.totalWidth;
            sumTotalMaxWidth += header.totalMaxWidth;
            sumTotalFlexWidth += header.totalFlexWidth;
          }
        });
        return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth];
      }
      function accessRowsForColumn(_ref) {
        var data = _ref.data, rows = _ref.rows, flatRows = _ref.flatRows, rowsById = _ref.rowsById, column = _ref.column, getRowId = _ref.getRowId, getSubRows = _ref.getSubRows, accessValueHooks = _ref.accessValueHooks, getInstance = _ref.getInstance;
        var accessRow = function accessRow2(originalRow, rowIndex, depth, parent, parentRows) {
          if (depth === void 0) {
            depth = 0;
          }
          var original = originalRow;
          var id = getRowId(originalRow, rowIndex, parent);
          var row = rowsById[id];
          if (!row) {
            row = {
              id,
              original,
              index: rowIndex,
              depth,
              cells: [{}]
              // This is a dummy cell
            };
            row.cells.map = unpreparedAccessWarning;
            row.cells.filter = unpreparedAccessWarning;
            row.cells.forEach = unpreparedAccessWarning;
            row.cells[0].getCellProps = unpreparedAccessWarning;
            row.values = {};
            parentRows.push(row);
            flatRows.push(row);
            rowsById[id] = row;
            row.originalSubRows = getSubRows(originalRow, rowIndex);
            if (row.originalSubRows) {
              var subRows = [];
              row.originalSubRows.forEach(function(d, i) {
                return accessRow2(d, i, depth + 1, row, subRows);
              });
              row.subRows = subRows;
            }
          } else if (row.subRows) {
            row.originalSubRows.forEach(function(d, i) {
              return accessRow2(d, i, depth + 1, row);
            });
          }
          if (column.accessor) {
            row.values[column.id] = column.accessor(originalRow, rowIndex, row, parentRows, data);
          }
          row.values[column.id] = reduceHooks(accessValueHooks, row.values[column.id], {
            row,
            column,
            instance: getInstance()
          }, true);
        };
        data.forEach(function(originalRow, rowIndex) {
          return accessRow(originalRow, rowIndex, 0, void 0, rows);
        });
      }
      actions.resetExpanded = "resetExpanded";
      actions.toggleRowExpanded = "toggleRowExpanded";
      actions.toggleAllRowsExpanded = "toggleAllRowsExpanded";
      var useExpanded = function useExpanded2(hooks) {
        hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps];
        hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps];
        hooks.stateReducers.push(reducer$1);
        hooks.useInstance.push(useInstance$1);
        hooks.prepareRow.push(prepareRow);
      };
      useExpanded.pluginName = "useExpanded";
      var defaultGetToggleAllRowsExpandedProps = function defaultGetToggleAllRowsExpandedProps2(props, _ref) {
        var instance = _ref.instance;
        return [props, {
          onClick: function onClick(e) {
            instance.toggleAllRowsExpanded();
          },
          style: {
            cursor: "pointer"
          },
          title: "Toggle All Rows Expanded"
        }];
      };
      var defaultGetToggleRowExpandedProps = function defaultGetToggleRowExpandedProps2(props, _ref2) {
        var row = _ref2.row;
        return [props, {
          onClick: function onClick() {
            row.toggleRowExpanded();
          },
          style: {
            cursor: "pointer"
          },
          title: "Toggle Row Expanded"
        }];
      };
      function reducer$1(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            expanded: {}
          }, state);
        }
        if (action.type === actions.resetExpanded) {
          return _extends({}, state, {
            expanded: instance.initialState.expanded || {}
          });
        }
        if (action.type === actions.toggleAllRowsExpanded) {
          var value = action.value;
          var rowsById = instance.rowsById;
          var isAllRowsExpanded = Object.keys(rowsById).length === Object.keys(state.expanded).length;
          var expandAll = typeof value !== "undefined" ? value : !isAllRowsExpanded;
          if (expandAll) {
            var expanded = {};
            Object.keys(rowsById).forEach(function(rowId) {
              expanded[rowId] = true;
            });
            return _extends({}, state, {
              expanded
            });
          }
          return _extends({}, state, {
            expanded: {}
          });
        }
        if (action.type === actions.toggleRowExpanded) {
          var id = action.id, setExpanded = action.value;
          var exists = state.expanded[id];
          var shouldExist = typeof setExpanded !== "undefined" ? setExpanded : !exists;
          if (!exists && shouldExist) {
            var _extends2;
            return _extends({}, state, {
              expanded: _extends({}, state.expanded, (_extends2 = {}, _extends2[id] = true, _extends2))
            });
          } else if (exists && !shouldExist) {
            var _state$expanded = state.expanded, _ = _state$expanded[id], rest = _objectWithoutPropertiesLoose(_state$expanded, [id].map(_toPropertyKey));
            return _extends({}, state, {
              expanded: rest
            });
          } else {
            return state;
          }
        }
      }
      function useInstance$1(instance) {
        var data = instance.data, rows = instance.rows, rowsById = instance.rowsById, _instance$manualExpan = instance.manualExpandedKey, manualExpandedKey = _instance$manualExpan === void 0 ? "expanded" : _instance$manualExpan, _instance$paginateExp = instance.paginateExpandedRows, paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp, _instance$expandSubRo = instance.expandSubRows, expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo, _instance$autoResetEx = instance.autoResetExpanded, autoResetExpanded = _instance$autoResetEx === void 0 ? true : _instance$autoResetEx, getHooks = instance.getHooks, plugins = instance.plugins, expanded = instance.state.expanded, dispatch = instance.dispatch;
        ensurePluginOrder(plugins, ["useSortBy", "useGroupBy", "usePivotColumns", "useGlobalFilter"], "useExpanded");
        var getAutoResetExpanded = useGetLatest(autoResetExpanded);
        var isAllRowsExpanded = Boolean(Object.keys(rowsById).length && Object.keys(expanded).length);
        if (isAllRowsExpanded) {
          if (Object.keys(rowsById).some(function(id) {
            return !expanded[id];
          })) {
            isAllRowsExpanded = false;
          }
        }
        useMountedLayoutEffect(function() {
          if (getAutoResetExpanded()) {
            dispatch({
              type: actions.resetExpanded
            });
          }
        }, [dispatch, data]);
        var toggleRowExpanded = React.useCallback(function(id, value) {
          dispatch({
            type: actions.toggleRowExpanded,
            id,
            value
          });
        }, [dispatch]);
        var toggleAllRowsExpanded = React.useCallback(function(value) {
          return dispatch({
            type: actions.toggleAllRowsExpanded,
            value
          });
        }, [dispatch]);
        var expandedRows = React.useMemo(function() {
          if (paginateExpandedRows) {
            return expandRows(rows, {
              manualExpandedKey,
              expanded,
              expandSubRows
            });
          }
          return rows;
        }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows]);
        var expandedDepth = React.useMemo(function() {
          return findExpandedDepth(expanded);
        }, [expanded]);
        var getInstance = useGetLatest(instance);
        var getToggleAllRowsExpandedProps = makePropGetter(getHooks().getToggleAllRowsExpandedProps, {
          instance: getInstance()
        });
        Object.assign(instance, {
          preExpandedRows: rows,
          expandedRows,
          rows: expandedRows,
          expandedDepth,
          isAllRowsExpanded,
          toggleRowExpanded,
          toggleAllRowsExpanded,
          getToggleAllRowsExpandedProps
        });
      }
      function prepareRow(row, _ref3) {
        var getHooks = _ref3.instance.getHooks, instance = _ref3.instance;
        row.toggleRowExpanded = function(set) {
          return instance.toggleRowExpanded(row.id, set);
        };
        row.getToggleRowExpandedProps = makePropGetter(getHooks().getToggleRowExpandedProps, {
          instance,
          row
        });
      }
      function findExpandedDepth(expanded) {
        var maxDepth = 0;
        Object.keys(expanded).forEach(function(id) {
          var splitId = id.split(".");
          maxDepth = Math.max(maxDepth, splitId.length);
        });
        return maxDepth;
      }
      var text = function text2(rows, ids, filterValue) {
        rows = rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return String(rowValue).toLowerCase().includes(String(filterValue).toLowerCase());
          });
        });
        return rows;
      };
      text.autoRemove = function(val) {
        return !val;
      };
      var exactText = function exactText2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return rowValue !== void 0 ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase() : true;
          });
        });
      };
      exactText.autoRemove = function(val) {
        return !val;
      };
      var exactTextCase = function exactTextCase2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return rowValue !== void 0 ? String(rowValue) === String(filterValue) : true;
          });
        });
      };
      exactTextCase.autoRemove = function(val) {
        return !val;
      };
      var includes = function includes2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return rowValue.includes(filterValue);
          });
        });
      };
      includes.autoRemove = function(val) {
        return !val || !val.length;
      };
      var includesAll = function includesAll2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return rowValue && rowValue.length && filterValue.every(function(val) {
              return rowValue.includes(val);
            });
          });
        });
      };
      includesAll.autoRemove = function(val) {
        return !val || !val.length;
      };
      var includesSome = function includesSome2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return rowValue && rowValue.length && filterValue.some(function(val) {
              return rowValue.includes(val);
            });
          });
        });
      };
      includesSome.autoRemove = function(val) {
        return !val || !val.length;
      };
      var includesValue = function includesValue2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return filterValue.includes(rowValue);
          });
        });
      };
      includesValue.autoRemove = function(val) {
        return !val || !val.length;
      };
      var exact = function exact2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return rowValue === filterValue;
          });
        });
      };
      exact.autoRemove = function(val) {
        return typeof val === "undefined";
      };
      var equals = function equals2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return rowValue == filterValue;
          });
        });
      };
      equals.autoRemove = function(val) {
        return val == null;
      };
      var between = function between2(rows, ids, filterValue) {
        var _ref = filterValue || [], min2 = _ref[0], max2 = _ref[1];
        min2 = typeof min2 === "number" ? min2 : -Infinity;
        max2 = typeof max2 === "number" ? max2 : Infinity;
        if (min2 > max2) {
          var temp = min2;
          min2 = max2;
          max2 = temp;
        }
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return rowValue >= min2 && rowValue <= max2;
          });
        });
      };
      between.autoRemove = function(val) {
        return !val || typeof val[0] !== "number" && typeof val[1] !== "number";
      };
      var filterTypes = Object.freeze({
        __proto__: null,
        text,
        exactText,
        exactTextCase,
        includes,
        includesAll,
        includesSome,
        includesValue,
        exact,
        equals,
        between
      });
      actions.resetFilters = "resetFilters";
      actions.setFilter = "setFilter";
      actions.setAllFilters = "setAllFilters";
      var useFilters = function useFilters2(hooks) {
        hooks.stateReducers.push(reducer$2);
        hooks.useInstance.push(useInstance$2);
      };
      useFilters.pluginName = "useFilters";
      function reducer$2(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            filters: []
          }, state);
        }
        if (action.type === actions.resetFilters) {
          return _extends({}, state, {
            filters: instance.initialState.filters || []
          });
        }
        if (action.type === actions.setFilter) {
          var columnId = action.columnId, filterValue = action.filterValue;
          var allColumns2 = instance.allColumns, userFilterTypes = instance.filterTypes;
          var column = allColumns2.find(function(d) {
            return d.id === columnId;
          });
          if (!column) {
            throw new Error("React-Table: Could not find a column with id: " + columnId);
          }
          var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);
          var previousfilter = state.filters.find(function(d) {
            return d.id === columnId;
          });
          var newFilter = functionalUpdate(filterValue, previousfilter && previousfilter.value);
          if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {
            return _extends({}, state, {
              filters: state.filters.filter(function(d) {
                return d.id !== columnId;
              })
            });
          }
          if (previousfilter) {
            return _extends({}, state, {
              filters: state.filters.map(function(d) {
                if (d.id === columnId) {
                  return {
                    id: columnId,
                    value: newFilter
                  };
                }
                return d;
              })
            });
          }
          return _extends({}, state, {
            filters: [].concat(state.filters, [{
              id: columnId,
              value: newFilter
            }])
          });
        }
        if (action.type === actions.setAllFilters) {
          var filters = action.filters;
          var _allColumns = instance.allColumns, _userFilterTypes = instance.filterTypes;
          return _extends({}, state, {
            // Filter out undefined values
            filters: functionalUpdate(filters, state.filters).filter(function(filter) {
              var column2 = _allColumns.find(function(d) {
                return d.id === filter.id;
              });
              var filterMethod2 = getFilterMethod(column2.filter, _userFilterTypes || {}, filterTypes);
              if (shouldAutoRemoveFilter(filterMethod2.autoRemove, filter.value, column2)) {
                return false;
              }
              return true;
            })
          });
        }
      }
      function useInstance$2(instance) {
        var data = instance.data, rows = instance.rows, flatRows = instance.flatRows, rowsById = instance.rowsById, allColumns2 = instance.allColumns, userFilterTypes = instance.filterTypes, manualFilters = instance.manualFilters, _instance$defaultCanF = instance.defaultCanFilter, defaultCanFilter = _instance$defaultCanF === void 0 ? false : _instance$defaultCanF, disableFilters = instance.disableFilters, filters = instance.state.filters, dispatch = instance.dispatch, _instance$autoResetFi = instance.autoResetFilters, autoResetFilters = _instance$autoResetFi === void 0 ? true : _instance$autoResetFi;
        var setFilter = React.useCallback(function(columnId, filterValue) {
          dispatch({
            type: actions.setFilter,
            columnId,
            filterValue
          });
        }, [dispatch]);
        var setAllFilters = React.useCallback(function(filters2) {
          dispatch({
            type: actions.setAllFilters,
            filters: filters2
          });
        }, [dispatch]);
        allColumns2.forEach(function(column) {
          var id = column.id, accessor = column.accessor, columnDefaultCanFilter = column.defaultCanFilter, columnDisableFilters = column.disableFilters;
          column.canFilter = accessor ? getFirstDefined(columnDisableFilters === true ? false : void 0, disableFilters === true ? false : void 0, true) : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false);
          column.setFilter = function(val) {
            return setFilter(column.id, val);
          };
          var found = filters.find(function(d) {
            return d.id === id;
          });
          column.filterValue = found && found.value;
        });
        var _React$useMemo = React.useMemo(function() {
          if (manualFilters || !filters.length) {
            return [rows, flatRows, rowsById];
          }
          var filteredFlatRows2 = [];
          var filteredRowsById2 = {};
          var filterRows = function filterRows2(rows2, depth) {
            if (depth === void 0) {
              depth = 0;
            }
            var filteredRows2 = rows2;
            filteredRows2 = filters.reduce(function(filteredSoFar, _ref) {
              var columnId = _ref.id, filterValue = _ref.value;
              var column = allColumns2.find(function(d) {
                return d.id === columnId;
              });
              if (!column) {
                return filteredSoFar;
              }
              if (depth === 0) {
                column.preFilteredRows = filteredSoFar;
              }
              var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);
              if (!filterMethod) {
                console.warn("Could not find a valid 'column.filter' for column with the ID: " + column.id + ".");
                return filteredSoFar;
              }
              column.filteredRows = filterMethod(filteredSoFar, [columnId], filterValue);
              return column.filteredRows;
            }, rows2);
            filteredRows2.forEach(function(row) {
              filteredFlatRows2.push(row);
              filteredRowsById2[row.id] = row;
              if (!row.subRows) {
                return;
              }
              row.subRows = row.subRows && row.subRows.length > 0 ? filterRows2(row.subRows, depth + 1) : row.subRows;
            });
            return filteredRows2;
          };
          return [filterRows(rows), filteredFlatRows2, filteredRowsById2];
        }, [manualFilters, filters, rows, flatRows, rowsById, allColumns2, userFilterTypes]), filteredRows = _React$useMemo[0], filteredFlatRows = _React$useMemo[1], filteredRowsById = _React$useMemo[2];
        React.useMemo(function() {
          var nonFilteredColumns = allColumns2.filter(function(column) {
            return !filters.find(function(d) {
              return d.id === column.id;
            });
          });
          nonFilteredColumns.forEach(function(column) {
            column.preFilteredRows = filteredRows;
            column.filteredRows = filteredRows;
          });
        }, [filteredRows, filters, allColumns2]);
        var getAutoResetFilters = useGetLatest(autoResetFilters);
        useMountedLayoutEffect(function() {
          if (getAutoResetFilters()) {
            dispatch({
              type: actions.resetFilters
            });
          }
        }, [dispatch, manualFilters ? null : data]);
        Object.assign(instance, {
          preFilteredRows: rows,
          preFilteredFlatRows: flatRows,
          preFilteredRowsById: rowsById,
          filteredRows,
          filteredFlatRows,
          filteredRowsById,
          rows: filteredRows,
          flatRows: filteredFlatRows,
          rowsById: filteredRowsById,
          setFilter,
          setAllFilters
        });
      }
      actions.resetGlobalFilter = "resetGlobalFilter";
      actions.setGlobalFilter = "setGlobalFilter";
      var useGlobalFilter = function useGlobalFilter2(hooks) {
        hooks.stateReducers.push(reducer$3);
        hooks.useInstance.push(useInstance$3);
      };
      useGlobalFilter.pluginName = "useGlobalFilter";
      function reducer$3(state, action, previousState, instance) {
        if (action.type === actions.resetGlobalFilter) {
          return _extends({}, state, {
            globalFilter: instance.initialState.globalFilter || void 0
          });
        }
        if (action.type === actions.setGlobalFilter) {
          var filterValue = action.filterValue;
          var userFilterTypes = instance.userFilterTypes;
          var filterMethod = getFilterMethod(instance.globalFilter, userFilterTypes || {}, filterTypes);
          var newFilter = functionalUpdate(filterValue, state.globalFilter);
          if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {
            var globalFilter = state.globalFilter, stateWithoutGlobalFilter = _objectWithoutPropertiesLoose(state, ["globalFilter"]);
            return stateWithoutGlobalFilter;
          }
          return _extends({}, state, {
            globalFilter: newFilter
          });
        }
      }
      function useInstance$3(instance) {
        var data = instance.data, rows = instance.rows, flatRows = instance.flatRows, rowsById = instance.rowsById, allColumns2 = instance.allColumns, userFilterTypes = instance.filterTypes, globalFilter = instance.globalFilter, manualGlobalFilter = instance.manualGlobalFilter, globalFilterValue = instance.state.globalFilter, dispatch = instance.dispatch, _instance$autoResetGl = instance.autoResetGlobalFilter, autoResetGlobalFilter = _instance$autoResetGl === void 0 ? true : _instance$autoResetGl, disableGlobalFilter = instance.disableGlobalFilter;
        var setGlobalFilter = React.useCallback(function(filterValue) {
          dispatch({
            type: actions.setGlobalFilter,
            filterValue
          });
        }, [dispatch]);
        var _React$useMemo = React.useMemo(function() {
          if (manualGlobalFilter || typeof globalFilterValue === "undefined") {
            return [rows, flatRows, rowsById];
          }
          var filteredFlatRows = [];
          var filteredRowsById = {};
          var filterMethod = getFilterMethod(globalFilter, userFilterTypes || {}, filterTypes);
          if (!filterMethod) {
            console.warn("Could not find a valid 'globalFilter' option.");
            return rows;
          }
          allColumns2.forEach(function(column) {
            var columnDisableGlobalFilter = column.disableGlobalFilter;
            column.canFilter = getFirstDefined(columnDisableGlobalFilter === true ? false : void 0, disableGlobalFilter === true ? false : void 0, true);
          });
          var filterableColumns = allColumns2.filter(function(c) {
            return c.canFilter === true;
          });
          var filterRows = function filterRows2(filteredRows) {
            filteredRows = filterMethod(filteredRows, filterableColumns.map(function(d) {
              return d.id;
            }), globalFilterValue);
            filteredRows.forEach(function(row) {
              filteredFlatRows.push(row);
              filteredRowsById[row.id] = row;
              row.subRows = row.subRows && row.subRows.length ? filterRows2(row.subRows) : row.subRows;
            });
            return filteredRows;
          };
          return [filterRows(rows), filteredFlatRows, filteredRowsById];
        }, [manualGlobalFilter, globalFilterValue, globalFilter, userFilterTypes, allColumns2, rows, flatRows, rowsById, disableGlobalFilter]), globalFilteredRows = _React$useMemo[0], globalFilteredFlatRows = _React$useMemo[1], globalFilteredRowsById = _React$useMemo[2];
        var getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter);
        useMountedLayoutEffect(function() {
          if (getAutoResetGlobalFilter()) {
            dispatch({
              type: actions.resetGlobalFilter
            });
          }
        }, [dispatch, manualGlobalFilter ? null : data]);
        Object.assign(instance, {
          preGlobalFilteredRows: rows,
          preGlobalFilteredFlatRows: flatRows,
          preGlobalFilteredRowsById: rowsById,
          globalFilteredRows,
          globalFilteredFlatRows,
          globalFilteredRowsById,
          rows: globalFilteredRows,
          flatRows: globalFilteredFlatRows,
          rowsById: globalFilteredRowsById,
          setGlobalFilter,
          disableGlobalFilter
        });
      }
      function sum(values, aggregatedValues) {
        return aggregatedValues.reduce(function(sum2, next) {
          return sum2 + (typeof next === "number" ? next : 0);
        }, 0);
      }
      function min(values) {
        var min2 = values[0] || 0;
        values.forEach(function(value) {
          if (typeof value === "number") {
            min2 = Math.min(min2, value);
          }
        });
        return min2;
      }
      function max(values) {
        var max2 = values[0] || 0;
        values.forEach(function(value) {
          if (typeof value === "number") {
            max2 = Math.max(max2, value);
          }
        });
        return max2;
      }
      function minMax(values) {
        var min2 = values[0] || 0;
        var max2 = values[0] || 0;
        values.forEach(function(value) {
          if (typeof value === "number") {
            min2 = Math.min(min2, value);
            max2 = Math.max(max2, value);
          }
        });
        return min2 + ".." + max2;
      }
      function average(values) {
        return sum(null, values) / values.length;
      }
      function median(values) {
        if (!values.length) {
          return null;
        }
        var mid = Math.floor(values.length / 2);
        var nums = [].concat(values).sort(function(a, b) {
          return a - b;
        });
        return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;
      }
      function unique(values) {
        return Array.from(new Set(values).values());
      }
      function uniqueCount(values) {
        return new Set(values).size;
      }
      function count(values) {
        return values.length;
      }
      var aggregations = Object.freeze({
        __proto__: null,
        sum,
        min,
        max,
        minMax,
        average,
        median,
        unique,
        uniqueCount,
        count
      });
      var emptyArray = [];
      var emptyObject = {};
      actions.resetGroupBy = "resetGroupBy";
      actions.setGroupBy = "setGroupBy";
      actions.toggleGroupBy = "toggleGroupBy";
      var useGroupBy = function useGroupBy2(hooks) {
        hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps];
        hooks.stateReducers.push(reducer$4);
        hooks.visibleColumnsDeps.push(function(deps, _ref) {
          var instance = _ref.instance;
          return [].concat(deps, [instance.state.groupBy]);
        });
        hooks.visibleColumns.push(visibleColumns);
        hooks.useInstance.push(useInstance$4);
        hooks.prepareRow.push(prepareRow$1);
      };
      useGroupBy.pluginName = "useGroupBy";
      var defaultGetGroupByToggleProps = function defaultGetGroupByToggleProps2(props, _ref2) {
        var header = _ref2.header;
        return [props, {
          onClick: header.canGroupBy ? function(e) {
            e.persist();
            header.toggleGroupBy();
          } : void 0,
          style: {
            cursor: header.canGroupBy ? "pointer" : void 0
          },
          title: "Toggle GroupBy"
        }];
      };
      function reducer$4(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            groupBy: []
          }, state);
        }
        if (action.type === actions.resetGroupBy) {
          return _extends({}, state, {
            groupBy: instance.initialState.groupBy || []
          });
        }
        if (action.type === actions.setGroupBy) {
          var value = action.value;
          return _extends({}, state, {
            groupBy: value
          });
        }
        if (action.type === actions.toggleGroupBy) {
          var columnId = action.columnId, setGroupBy = action.value;
          var resolvedGroupBy = typeof setGroupBy !== "undefined" ? setGroupBy : !state.groupBy.includes(columnId);
          if (resolvedGroupBy) {
            return _extends({}, state, {
              groupBy: [].concat(state.groupBy, [columnId])
            });
          }
          return _extends({}, state, {
            groupBy: state.groupBy.filter(function(d) {
              return d !== columnId;
            })
          });
        }
      }
      function visibleColumns(columns, _ref3) {
        var groupBy = _ref3.instance.state.groupBy;
        var groupByColumns = groupBy.map(function(g) {
          return columns.find(function(col) {
            return col.id === g;
          });
        }).filter(Boolean);
        var nonGroupByColumns = columns.filter(function(col) {
          return !groupBy.includes(col.id);
        });
        columns = [].concat(groupByColumns, nonGroupByColumns);
        columns.forEach(function(column) {
          column.isGrouped = groupBy.includes(column.id);
          column.groupedIndex = groupBy.indexOf(column.id);
        });
        return columns;
      }
      var defaultUserAggregations = {};
      function useInstance$4(instance) {
        var data = instance.data, rows = instance.rows, flatRows = instance.flatRows, rowsById = instance.rowsById, allColumns2 = instance.allColumns, flatHeaders = instance.flatHeaders, _instance$groupByFn = instance.groupByFn, groupByFn = _instance$groupByFn === void 0 ? defaultGroupByFn : _instance$groupByFn, manualGroupBy = instance.manualGroupBy, _instance$aggregation = instance.aggregations, userAggregations = _instance$aggregation === void 0 ? defaultUserAggregations : _instance$aggregation, plugins = instance.plugins, groupBy = instance.state.groupBy, dispatch = instance.dispatch, _instance$autoResetGr = instance.autoResetGroupBy, autoResetGroupBy = _instance$autoResetGr === void 0 ? true : _instance$autoResetGr, disableGroupBy = instance.disableGroupBy, defaultCanGroupBy = instance.defaultCanGroupBy, getHooks = instance.getHooks;
        ensurePluginOrder(plugins, ["useColumnOrder", "useFilters"], "useGroupBy");
        var getInstance = useGetLatest(instance);
        allColumns2.forEach(function(column) {
          var accessor = column.accessor, defaultColumnGroupBy = column.defaultGroupBy, columnDisableGroupBy = column.disableGroupBy;
          column.canGroupBy = accessor ? getFirstDefined(column.canGroupBy, columnDisableGroupBy === true ? false : void 0, disableGroupBy === true ? false : void 0, true) : getFirstDefined(column.canGroupBy, defaultColumnGroupBy, defaultCanGroupBy, false);
          if (column.canGroupBy) {
            column.toggleGroupBy = function() {
              return instance.toggleGroupBy(column.id);
            };
          }
          column.Aggregated = column.Aggregated || column.Cell;
        });
        var toggleGroupBy = React.useCallback(function(columnId, value) {
          dispatch({
            type: actions.toggleGroupBy,
            columnId,
            value
          });
        }, [dispatch]);
        var setGroupBy = React.useCallback(function(value) {
          dispatch({
            type: actions.setGroupBy,
            value
          });
        }, [dispatch]);
        flatHeaders.forEach(function(header) {
          header.getGroupByToggleProps = makePropGetter(getHooks().getGroupByToggleProps, {
            instance: getInstance(),
            header
          });
        });
        var _React$useMemo = React.useMemo(function() {
          if (manualGroupBy || !groupBy.length) {
            return [rows, flatRows, rowsById, emptyArray, emptyObject, flatRows, rowsById];
          }
          var existingGroupBy = groupBy.filter(function(g) {
            return allColumns2.find(function(col) {
              return col.id === g;
            });
          });
          var aggregateRowsToValues = function aggregateRowsToValues2(leafRows, groupedRows3, depth) {
            var values = {};
            allColumns2.forEach(function(column) {
              if (existingGroupBy.includes(column.id)) {
                values[column.id] = groupedRows3[0] ? groupedRows3[0].values[column.id] : null;
                return;
              }
              var aggregateFn = typeof column.aggregate === "function" ? column.aggregate : userAggregations[column.aggregate] || aggregations[column.aggregate];
              if (aggregateFn) {
                var groupedValues = groupedRows3.map(function(row) {
                  return row.values[column.id];
                });
                var leafValues = leafRows.map(function(row) {
                  var columnValue = row.values[column.id];
                  if (!depth && column.aggregateValue) {
                    var aggregateValueFn = typeof column.aggregateValue === "function" ? column.aggregateValue : userAggregations[column.aggregateValue] || aggregations[column.aggregateValue];
                    if (!aggregateValueFn) {
                      console.info({
                        column
                      });
                      throw new Error("React Table: Invalid column.aggregateValue option for column listed above");
                    }
                    columnValue = aggregateValueFn(columnValue, row, column);
                  }
                  return columnValue;
                });
                values[column.id] = aggregateFn(leafValues, groupedValues);
              } else if (column.aggregate) {
                console.info({
                  column
                });
                throw new Error("React Table: Invalid column.aggregate option for column listed above");
              } else {
                values[column.id] = null;
              }
            });
            return values;
          };
          var groupedFlatRows2 = [];
          var groupedRowsById2 = {};
          var onlyGroupedFlatRows2 = [];
          var onlyGroupedRowsById2 = {};
          var nonGroupedFlatRows2 = [];
          var nonGroupedRowsById2 = {};
          var groupUpRecursively = function groupUpRecursively2(rows2, depth, parentId) {
            if (depth === void 0) {
              depth = 0;
            }
            if (depth === existingGroupBy.length) {
              return rows2.map(function(row) {
                return _extends({}, row, {
                  depth
                });
              });
            }
            var columnId = existingGroupBy[depth];
            var rowGroupsMap = groupByFn(rows2, columnId);
            var aggregatedGroupedRows = Object.entries(rowGroupsMap).map(function(_ref4, index) {
              var groupByVal = _ref4[0], groupedRows3 = _ref4[1];
              var id = columnId + ":" + groupByVal;
              id = parentId ? parentId + ">" + id : id;
              var subRows = groupUpRecursively2(groupedRows3, depth + 1, id);
              var leafRows = depth ? flattenBy(groupedRows3, "leafRows") : groupedRows3;
              var values = aggregateRowsToValues(leafRows, groupedRows3, depth);
              var row = {
                id,
                isGrouped: true,
                groupByID: columnId,
                groupByVal,
                values,
                subRows,
                leafRows,
                depth,
                index
              };
              subRows.forEach(function(subRow) {
                groupedFlatRows2.push(subRow);
                groupedRowsById2[subRow.id] = subRow;
                if (subRow.isGrouped) {
                  onlyGroupedFlatRows2.push(subRow);
                  onlyGroupedRowsById2[subRow.id] = subRow;
                } else {
                  nonGroupedFlatRows2.push(subRow);
                  nonGroupedRowsById2[subRow.id] = subRow;
                }
              });
              return row;
            });
            return aggregatedGroupedRows;
          };
          var groupedRows2 = groupUpRecursively(rows);
          groupedRows2.forEach(function(subRow) {
            groupedFlatRows2.push(subRow);
            groupedRowsById2[subRow.id] = subRow;
            if (subRow.isGrouped) {
              onlyGroupedFlatRows2.push(subRow);
              onlyGroupedRowsById2[subRow.id] = subRow;
            } else {
              nonGroupedFlatRows2.push(subRow);
              nonGroupedRowsById2[subRow.id] = subRow;
            }
          });
          return [groupedRows2, groupedFlatRows2, groupedRowsById2, onlyGroupedFlatRows2, onlyGroupedRowsById2, nonGroupedFlatRows2, nonGroupedRowsById2];
        }, [manualGroupBy, groupBy, rows, flatRows, rowsById, allColumns2, userAggregations, groupByFn]), groupedRows = _React$useMemo[0], groupedFlatRows = _React$useMemo[1], groupedRowsById = _React$useMemo[2], onlyGroupedFlatRows = _React$useMemo[3], onlyGroupedRowsById = _React$useMemo[4], nonGroupedFlatRows = _React$useMemo[5], nonGroupedRowsById = _React$useMemo[6];
        var getAutoResetGroupBy = useGetLatest(autoResetGroupBy);
        useMountedLayoutEffect(function() {
          if (getAutoResetGroupBy()) {
            dispatch({
              type: actions.resetGroupBy
            });
          }
        }, [dispatch, manualGroupBy ? null : data]);
        Object.assign(instance, {
          preGroupedRows: rows,
          preGroupedFlatRow: flatRows,
          preGroupedRowsById: rowsById,
          groupedRows,
          groupedFlatRows,
          groupedRowsById,
          onlyGroupedFlatRows,
          onlyGroupedRowsById,
          nonGroupedFlatRows,
          nonGroupedRowsById,
          rows: groupedRows,
          flatRows: groupedFlatRows,
          rowsById: groupedRowsById,
          toggleGroupBy,
          setGroupBy
        });
      }
      function prepareRow$1(row) {
        row.allCells.forEach(function(cell) {
          var _row$subRows;
          cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID;
          cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped;
          cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && ((_row$subRows = row.subRows) == null ? void 0 : _row$subRows.length);
        });
      }
      function defaultGroupByFn(rows, columnId) {
        return rows.reduce(function(prev, row, i) {
          var resKey = "" + row.values[columnId];
          prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : [];
          prev[resKey].push(row);
          return prev;
        }, {});
      }
      var reSplitAlphaNumeric = /([0-9]+)/gm;
      var alphanumeric = function alphanumeric2(rowA, rowB, columnId) {
        var _getRowValuesByColumn = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn[0], b = _getRowValuesByColumn[1];
        a = toString(a);
        b = toString(b);
        a = a.split(reSplitAlphaNumeric).filter(Boolean);
        b = b.split(reSplitAlphaNumeric).filter(Boolean);
        while (a.length && b.length) {
          var aa = a.shift();
          var bb = b.shift();
          var an = parseInt(aa, 10);
          var bn = parseInt(bb, 10);
          var combo = [an, bn].sort();
          if (isNaN(combo[0])) {
            if (aa > bb) {
              return 1;
            }
            if (bb > aa) {
              return -1;
            }
            continue;
          }
          if (isNaN(combo[1])) {
            return isNaN(an) ? -1 : 1;
          }
          if (an > bn) {
            return 1;
          }
          if (bn > an) {
            return -1;
          }
        }
        return a.length - b.length;
      };
      function datetime(rowA, rowB, columnId) {
        var _getRowValuesByColumn2 = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn2[0], b = _getRowValuesByColumn2[1];
        a = a.getTime();
        b = b.getTime();
        return compareBasic(a, b);
      }
      function basic(rowA, rowB, columnId) {
        var _getRowValuesByColumn3 = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn3[0], b = _getRowValuesByColumn3[1];
        return compareBasic(a, b);
      }
      function string(rowA, rowB, columnId) {
        var _getRowValuesByColumn4 = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn4[0], b = _getRowValuesByColumn4[1];
        a = a.split("").filter(Boolean);
        b = b.split("").filter(Boolean);
        while (a.length && b.length) {
          var aa = a.shift();
          var bb = b.shift();
          var alower = aa.toLowerCase();
          var blower = bb.toLowerCase();
          if (alower > blower) {
            return 1;
          }
          if (blower > alower) {
            return -1;
          }
          if (aa > bb) {
            return 1;
          }
          if (bb > aa) {
            return -1;
          }
          continue;
        }
        return a.length - b.length;
      }
      function number(rowA, rowB, columnId) {
        var _getRowValuesByColumn5 = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn5[0], b = _getRowValuesByColumn5[1];
        var replaceNonNumeric = /[^0-9.]/gi;
        a = Number(String(a).replace(replaceNonNumeric, ""));
        b = Number(String(b).replace(replaceNonNumeric, ""));
        return compareBasic(a, b);
      }
      function compareBasic(a, b) {
        return a === b ? 0 : a > b ? 1 : -1;
      }
      function getRowValuesByColumnID(row1, row2, columnId) {
        return [row1.values[columnId], row2.values[columnId]];
      }
      function toString(a) {
        if (typeof a === "number") {
          if (isNaN(a) || a === Infinity || a === -Infinity) {
            return "";
          }
          return String(a);
        }
        if (typeof a === "string") {
          return a;
        }
        return "";
      }
      var sortTypes = Object.freeze({
        __proto__: null,
        alphanumeric,
        datetime,
        basic,
        string,
        number
      });
      actions.resetSortBy = "resetSortBy";
      actions.setSortBy = "setSortBy";
      actions.toggleSortBy = "toggleSortBy";
      actions.clearSortBy = "clearSortBy";
      defaultColumn.sortType = "alphanumeric";
      defaultColumn.sortDescFirst = false;
      var useSortBy = function useSortBy2(hooks) {
        hooks.getSortByToggleProps = [defaultGetSortByToggleProps];
        hooks.stateReducers.push(reducer$5);
        hooks.useInstance.push(useInstance$5);
      };
      useSortBy.pluginName = "useSortBy";
      var defaultGetSortByToggleProps = function defaultGetSortByToggleProps2(props, _ref) {
        var instance = _ref.instance, column = _ref.column;
        var _instance$isMultiSort = instance.isMultiSortEvent, isMultiSortEvent = _instance$isMultiSort === void 0 ? function(e) {
          return e.shiftKey;
        } : _instance$isMultiSort;
        return [props, {
          onClick: column.canSort ? function(e) {
            e.persist();
            column.toggleSortBy(void 0, !instance.disableMultiSort && isMultiSortEvent(e));
          } : void 0,
          style: {
            cursor: column.canSort ? "pointer" : void 0
          },
          title: column.canSort ? "Toggle SortBy" : void 0
        }];
      };
      function reducer$5(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            sortBy: []
          }, state);
        }
        if (action.type === actions.resetSortBy) {
          return _extends({}, state, {
            sortBy: instance.initialState.sortBy || []
          });
        }
        if (action.type === actions.clearSortBy) {
          var sortBy = state.sortBy;
          var newSortBy = sortBy.filter(function(d) {
            return d.id !== action.columnId;
          });
          return _extends({}, state, {
            sortBy: newSortBy
          });
        }
        if (action.type === actions.setSortBy) {
          var _sortBy = action.sortBy;
          return _extends({}, state, {
            sortBy: _sortBy
          });
        }
        if (action.type === actions.toggleSortBy) {
          var columnId = action.columnId, desc = action.desc, multi = action.multi;
          var allColumns2 = instance.allColumns, disableMultiSort = instance.disableMultiSort, disableSortRemove = instance.disableSortRemove, disableMultiRemove = instance.disableMultiRemove, _instance$maxMultiSor = instance.maxMultiSortColCount, maxMultiSortColCount = _instance$maxMultiSor === void 0 ? Number.MAX_SAFE_INTEGER : _instance$maxMultiSor;
          var _sortBy2 = state.sortBy;
          var column = allColumns2.find(function(d) {
            return d.id === columnId;
          });
          var sortDescFirst = column.sortDescFirst;
          var existingSortBy = _sortBy2.find(function(d) {
            return d.id === columnId;
          });
          var existingIndex = _sortBy2.findIndex(function(d) {
            return d.id === columnId;
          });
          var hasDescDefined = typeof desc !== "undefined" && desc !== null;
          var _newSortBy = [];
          var sortAction;
          if (!disableMultiSort && multi) {
            if (existingSortBy) {
              sortAction = "toggle";
            } else {
              sortAction = "add";
            }
          } else {
            if (existingIndex !== _sortBy2.length - 1 || _sortBy2.length !== 1) {
              sortAction = "replace";
            } else if (existingSortBy) {
              sortAction = "toggle";
            } else {
              sortAction = "replace";
            }
          }
          if (sortAction === "toggle" && // Must be toggling
          !disableSortRemove && // If disableSortRemove, disable in general
          !hasDescDefined && // Must not be setting desc
          (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove
          (existingSortBy && // Finally, detect if it should indeed be removed
          existingSortBy.desc && !sortDescFirst || !existingSortBy.desc && sortDescFirst)) {
            sortAction = "remove";
          }
          if (sortAction === "replace") {
            _newSortBy = [{
              id: columnId,
              desc: hasDescDefined ? desc : sortDescFirst
            }];
          } else if (sortAction === "add") {
            _newSortBy = [].concat(_sortBy2, [{
              id: columnId,
              desc: hasDescDefined ? desc : sortDescFirst
            }]);
            _newSortBy.splice(0, _newSortBy.length - maxMultiSortColCount);
          } else if (sortAction === "toggle") {
            _newSortBy = _sortBy2.map(function(d) {
              if (d.id === columnId) {
                return _extends({}, d, {
                  desc: hasDescDefined ? desc : !existingSortBy.desc
                });
              }
              return d;
            });
          } else if (sortAction === "remove") {
            _newSortBy = _sortBy2.filter(function(d) {
              return d.id !== columnId;
            });
          }
          return _extends({}, state, {
            sortBy: _newSortBy
          });
        }
      }
      function useInstance$5(instance) {
        var data = instance.data, rows = instance.rows, flatRows = instance.flatRows, allColumns2 = instance.allColumns, _instance$orderByFn = instance.orderByFn, orderByFn = _instance$orderByFn === void 0 ? defaultOrderByFn : _instance$orderByFn, userSortTypes = instance.sortTypes, manualSortBy = instance.manualSortBy, defaultCanSort = instance.defaultCanSort, disableSortBy = instance.disableSortBy, flatHeaders = instance.flatHeaders, sortBy = instance.state.sortBy, dispatch = instance.dispatch, plugins = instance.plugins, getHooks = instance.getHooks, _instance$autoResetSo = instance.autoResetSortBy, autoResetSortBy = _instance$autoResetSo === void 0 ? true : _instance$autoResetSo;
        ensurePluginOrder(plugins, ["useFilters", "useGlobalFilter", "useGroupBy", "usePivotColumns"], "useSortBy");
        var setSortBy = React.useCallback(function(sortBy2) {
          dispatch({
            type: actions.setSortBy,
            sortBy: sortBy2
          });
        }, [dispatch]);
        var toggleSortBy = React.useCallback(function(columnId, desc, multi) {
          dispatch({
            type: actions.toggleSortBy,
            columnId,
            desc,
            multi
          });
        }, [dispatch]);
        var getInstance = useGetLatest(instance);
        flatHeaders.forEach(function(column) {
          var accessor = column.accessor, defaultColumnCanSort = column.canSort, columnDisableSortBy = column.disableSortBy, id = column.id;
          var canSort = accessor ? getFirstDefined(columnDisableSortBy === true ? false : void 0, disableSortBy === true ? false : void 0, true) : getFirstDefined(defaultCanSort, defaultColumnCanSort, false);
          column.canSort = canSort;
          if (column.canSort) {
            column.toggleSortBy = function(desc, multi) {
              return toggleSortBy(column.id, desc, multi);
            };
            column.clearSortBy = function() {
              dispatch({
                type: actions.clearSortBy,
                columnId: column.id
              });
            };
          }
          column.getSortByToggleProps = makePropGetter(getHooks().getSortByToggleProps, {
            instance: getInstance(),
            column
          });
          var columnSort = sortBy.find(function(d) {
            return d.id === id;
          });
          column.isSorted = !!columnSort;
          column.sortedIndex = sortBy.findIndex(function(d) {
            return d.id === id;
          });
          column.isSortedDesc = column.isSorted ? columnSort.desc : void 0;
        });
        var _React$useMemo = React.useMemo(function() {
          if (manualSortBy || !sortBy.length) {
            return [rows, flatRows];
          }
          var sortedFlatRows2 = [];
          var availableSortBy = sortBy.filter(function(sort) {
            return allColumns2.find(function(col) {
              return col.id === sort.id;
            });
          });
          var sortData = function sortData2(rows2) {
            var sortedData = orderByFn(
              rows2,
              availableSortBy.map(function(sort) {
                var column = allColumns2.find(function(d) {
                  return d.id === sort.id;
                });
                if (!column) {
                  throw new Error("React-Table: Could not find a column with id: " + sort.id + " while sorting");
                }
                var sortType = column.sortType;
                var sortMethod = isFunction(sortType) || (userSortTypes || {})[sortType] || sortTypes[sortType];
                if (!sortMethod) {
                  throw new Error("React-Table: Could not find a valid sortType of '" + sortType + "' for column '" + sort.id + "'.");
                }
                return function(a, b) {
                  return sortMethod(a, b, sort.id, sort.desc);
                };
              }),
              // Map the directions
              availableSortBy.map(function(sort) {
                var column = allColumns2.find(function(d) {
                  return d.id === sort.id;
                });
                if (column && column.sortInverted) {
                  return sort.desc;
                }
                return !sort.desc;
              })
            );
            sortedData.forEach(function(row) {
              sortedFlatRows2.push(row);
              if (!row.subRows || row.subRows.length === 0) {
                return;
              }
              row.subRows = sortData2(row.subRows);
            });
            return sortedData;
          };
          return [sortData(rows), sortedFlatRows2];
        }, [manualSortBy, sortBy, rows, flatRows, allColumns2, orderByFn, userSortTypes]), sortedRows = _React$useMemo[0], sortedFlatRows = _React$useMemo[1];
        var getAutoResetSortBy = useGetLatest(autoResetSortBy);
        useMountedLayoutEffect(function() {
          if (getAutoResetSortBy()) {
            dispatch({
              type: actions.resetSortBy
            });
          }
        }, [manualSortBy ? null : data]);
        Object.assign(instance, {
          preSortedRows: rows,
          preSortedFlatRows: flatRows,
          sortedRows,
          sortedFlatRows,
          rows: sortedRows,
          flatRows: sortedFlatRows,
          setSortBy,
          toggleSortBy
        });
      }
      function defaultOrderByFn(arr, funcs, dirs) {
        return [].concat(arr).sort(function(rowA, rowB) {
          for (var i = 0; i < funcs.length; i += 1) {
            var sortFn = funcs[i];
            var desc = dirs[i] === false || dirs[i] === "desc";
            var sortInt = sortFn(rowA, rowB);
            if (sortInt !== 0) {
              return desc ? -sortInt : sortInt;
            }
          }
          return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index;
        });
      }
      var pluginName = "usePagination";
      actions.resetPage = "resetPage";
      actions.gotoPage = "gotoPage";
      actions.setPageSize = "setPageSize";
      var usePagination = function usePagination2(hooks) {
        hooks.stateReducers.push(reducer$6);
        hooks.useInstance.push(useInstance$6);
      };
      usePagination.pluginName = pluginName;
      function reducer$6(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            pageSize: 10,
            pageIndex: 0
          }, state);
        }
        if (action.type === actions.resetPage) {
          return _extends({}, state, {
            pageIndex: instance.initialState.pageIndex || 0
          });
        }
        if (action.type === actions.gotoPage) {
          var pageCount = instance.pageCount, page = instance.page;
          var newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex);
          var canNavigate = false;
          if (newPageIndex > state.pageIndex) {
            canNavigate = pageCount === -1 ? page.length >= state.pageSize : newPageIndex < pageCount;
          } else if (newPageIndex < state.pageIndex) {
            canNavigate = newPageIndex > -1;
          }
          if (!canNavigate) {
            return state;
          }
          return _extends({}, state, {
            pageIndex: newPageIndex
          });
        }
        if (action.type === actions.setPageSize) {
          var pageSize = action.pageSize;
          var topRowIndex = state.pageSize * state.pageIndex;
          var pageIndex = Math.floor(topRowIndex / pageSize);
          return _extends({}, state, {
            pageIndex,
            pageSize
          });
        }
      }
      function useInstance$6(instance) {
        var rows = instance.rows, _instance$autoResetPa = instance.autoResetPage, autoResetPage = _instance$autoResetPa === void 0 ? true : _instance$autoResetPa, _instance$manualExpan = instance.manualExpandedKey, manualExpandedKey = _instance$manualExpan === void 0 ? "expanded" : _instance$manualExpan, plugins = instance.plugins, userPageCount = instance.pageCount, _instance$paginateExp = instance.paginateExpandedRows, paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp, _instance$expandSubRo = instance.expandSubRows, expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo, _instance$state = instance.state, pageSize = _instance$state.pageSize, pageIndex = _instance$state.pageIndex, expanded = _instance$state.expanded, globalFilter = _instance$state.globalFilter, filters = _instance$state.filters, groupBy = _instance$state.groupBy, sortBy = _instance$state.sortBy, dispatch = instance.dispatch, data = instance.data, manualPagination = instance.manualPagination;
        ensurePluginOrder(plugins, ["useGlobalFilter", "useFilters", "useGroupBy", "useSortBy", "useExpanded"], "usePagination");
        var getAutoResetPage = useGetLatest(autoResetPage);
        useMountedLayoutEffect(function() {
          if (getAutoResetPage()) {
            dispatch({
              type: actions.resetPage
            });
          }
        }, [dispatch, manualPagination ? null : data, globalFilter, filters, groupBy, sortBy]);
        var pageCount = manualPagination ? userPageCount : Math.ceil(rows.length / pageSize);
        var pageOptions = React.useMemo(function() {
          return pageCount > 0 ? [].concat(new Array(pageCount)).fill(null).map(function(d, i) {
            return i;
          }) : [];
        }, [pageCount]);
        var page = React.useMemo(function() {
          var page2;
          if (manualPagination) {
            page2 = rows;
          } else {
            var pageStart = pageSize * pageIndex;
            var pageEnd = pageStart + pageSize;
            page2 = rows.slice(pageStart, pageEnd);
          }
          if (paginateExpandedRows) {
            return page2;
          }
          return expandRows(page2, {
            manualExpandedKey,
            expanded,
            expandSubRows
          });
        }, [expandSubRows, expanded, manualExpandedKey, manualPagination, pageIndex, pageSize, paginateExpandedRows, rows]);
        var canPreviousPage = pageIndex > 0;
        var canNextPage = pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1;
        var gotoPage = React.useCallback(function(pageIndex2) {
          dispatch({
            type: actions.gotoPage,
            pageIndex: pageIndex2
          });
        }, [dispatch]);
        var previousPage = React.useCallback(function() {
          return gotoPage(function(old) {
            return old - 1;
          });
        }, [gotoPage]);
        var nextPage = React.useCallback(function() {
          return gotoPage(function(old) {
            return old + 1;
          });
        }, [gotoPage]);
        var setPageSize = React.useCallback(function(pageSize2) {
          dispatch({
            type: actions.setPageSize,
            pageSize: pageSize2
          });
        }, [dispatch]);
        Object.assign(instance, {
          pageOptions,
          pageCount,
          page,
          canPreviousPage,
          canNextPage,
          gotoPage,
          previousPage,
          nextPage,
          setPageSize
        });
      }
      actions.resetPivot = "resetPivot";
      actions.togglePivot = "togglePivot";
      var _UNSTABLE_usePivotColumns = function _UNSTABLE_usePivotColumns2(hooks) {
        hooks.getPivotToggleProps = [defaultGetPivotToggleProps];
        hooks.stateReducers.push(reducer$7);
        hooks.useInstanceAfterData.push(useInstanceAfterData);
        hooks.allColumns.push(allColumns);
        hooks.accessValue.push(accessValue);
        hooks.materializedColumns.push(materializedColumns);
        hooks.materializedColumnsDeps.push(materializedColumnsDeps);
        hooks.visibleColumns.push(visibleColumns$1);
        hooks.visibleColumnsDeps.push(visibleColumnsDeps);
        hooks.useInstance.push(useInstance$7);
        hooks.prepareRow.push(prepareRow$2);
      };
      _UNSTABLE_usePivotColumns.pluginName = "usePivotColumns";
      var defaultPivotColumns = [];
      var defaultGetPivotToggleProps = function defaultGetPivotToggleProps2(props, _ref) {
        var header = _ref.header;
        return [props, {
          onClick: header.canPivot ? function(e) {
            e.persist();
            header.togglePivot();
          } : void 0,
          style: {
            cursor: header.canPivot ? "pointer" : void 0
          },
          title: "Toggle Pivot"
        }];
      };
      function reducer$7(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            pivotColumns: defaultPivotColumns
          }, state);
        }
        if (action.type === actions.resetPivot) {
          return _extends({}, state, {
            pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns
          });
        }
        if (action.type === actions.togglePivot) {
          var columnId = action.columnId, setPivot = action.value;
          var resolvedPivot = typeof setPivot !== "undefined" ? setPivot : !state.pivotColumns.includes(columnId);
          if (resolvedPivot) {
            return _extends({}, state, {
              pivotColumns: [].concat(state.pivotColumns, [columnId])
            });
          }
          return _extends({}, state, {
            pivotColumns: state.pivotColumns.filter(function(d) {
              return d !== columnId;
            })
          });
        }
      }
      function useInstanceAfterData(instance) {
        instance.allColumns.forEach(function(column) {
          column.isPivotSource = instance.state.pivotColumns.includes(column.id);
        });
      }
      function allColumns(columns, _ref2) {
        var instance = _ref2.instance;
        columns.forEach(function(column) {
          column.isPivotSource = instance.state.pivotColumns.includes(column.id);
          column.uniqueValues = /* @__PURE__ */ new Set();
        });
        return columns;
      }
      function accessValue(value, _ref3) {
        var column = _ref3.column;
        if (column.uniqueValues && typeof value !== "undefined") {
          column.uniqueValues.add(value);
        }
        return value;
      }
      function materializedColumns(materialized, _ref4) {
        var instance = _ref4.instance;
        var allColumns2 = instance.allColumns, state = instance.state;
        if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {
          return materialized;
        }
        var pivotColumns = state.pivotColumns.map(function(id) {
          return allColumns2.find(function(d) {
            return d.id === id;
          });
        }).filter(Boolean);
        var sourceColumns = allColumns2.filter(function(d) {
          return !d.isPivotSource && !state.groupBy.includes(d.id) && !state.pivotColumns.includes(d.id);
        });
        var buildPivotColumns = function buildPivotColumns2(depth, parent, pivotFilters) {
          if (depth === void 0) {
            depth = 0;
          }
          if (pivotFilters === void 0) {
            pivotFilters = [];
          }
          var pivotColumn = pivotColumns[depth];
          if (!pivotColumn) {
            return sourceColumns.map(function(sourceColumn) {
              return _extends({}, sourceColumn, {
                canPivot: false,
                isPivoted: true,
                parent,
                depth,
                id: "" + (parent ? parent.id + "." + sourceColumn.id : sourceColumn.id),
                accessor: function accessor(originalRow, i, row) {
                  if (pivotFilters.every(function(filter) {
                    return filter(row);
                  })) {
                    return row.values[sourceColumn.id];
                  }
                }
              });
            });
          }
          var uniqueValues = Array.from(pivotColumn.uniqueValues).sort();
          return uniqueValues.map(function(uniqueValue) {
            var columnGroup = _extends({}, pivotColumn, {
              Header: pivotColumn.PivotHeader || typeof pivotColumn.header === "string" ? pivotColumn.Header + ": " + uniqueValue : uniqueValue,
              isPivotGroup: true,
              parent,
              depth,
              id: parent ? parent.id + "." + pivotColumn.id + "." + uniqueValue : pivotColumn.id + "." + uniqueValue,
              pivotValue: uniqueValue
            });
            columnGroup.columns = buildPivotColumns2(depth + 1, columnGroup, [].concat(pivotFilters, [function(row) {
              return row.values[pivotColumn.id] === uniqueValue;
            }]));
            return columnGroup;
          });
        };
        var newMaterialized = flattenColumns(buildPivotColumns());
        return [].concat(materialized, newMaterialized);
      }
      function materializedColumnsDeps(deps, _ref5) {
        var _ref5$instance$state = _ref5.instance.state, pivotColumns = _ref5$instance$state.pivotColumns, groupBy = _ref5$instance$state.groupBy;
        return [].concat(deps, [pivotColumns, groupBy]);
      }
      function visibleColumns$1(visibleColumns2, _ref6) {
        var state = _ref6.instance.state;
        visibleColumns2 = visibleColumns2.filter(function(d) {
          return !d.isPivotSource;
        });
        if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {
          visibleColumns2 = visibleColumns2.filter(function(column) {
            return column.isGrouped || column.isPivoted;
          });
        }
        return visibleColumns2;
      }
      function visibleColumnsDeps(deps, _ref7) {
        var instance = _ref7.instance;
        return [].concat(deps, [instance.state.pivotColumns, instance.state.groupBy]);
      }
      function useInstance$7(instance) {
        var columns = instance.columns, allColumns2 = instance.allColumns, flatHeaders = instance.flatHeaders, getHooks = instance.getHooks, plugins = instance.plugins, dispatch = instance.dispatch, _instance$autoResetPi = instance.autoResetPivot, autoResetPivot = _instance$autoResetPi === void 0 ? true : _instance$autoResetPi, manaulPivot = instance.manaulPivot, disablePivot = instance.disablePivot, defaultCanPivot = instance.defaultCanPivot;
        ensurePluginOrder(plugins, ["useGroupBy"], "usePivotColumns");
        var getInstance = useGetLatest(instance);
        allColumns2.forEach(function(column) {
          var accessor = column.accessor, defaultColumnPivot = column.defaultPivot, columnDisablePivot = column.disablePivot;
          column.canPivot = accessor ? getFirstDefined(column.canPivot, columnDisablePivot === true ? false : void 0, disablePivot === true ? false : void 0, true) : getFirstDefined(column.canPivot, defaultColumnPivot, defaultCanPivot, false);
          if (column.canPivot) {
            column.togglePivot = function() {
              return instance.togglePivot(column.id);
            };
          }
          column.Aggregated = column.Aggregated || column.Cell;
        });
        var togglePivot = function togglePivot2(columnId, value) {
          dispatch({
            type: actions.togglePivot,
            columnId,
            value
          });
        };
        flatHeaders.forEach(function(header) {
          header.getPivotToggleProps = makePropGetter(getHooks().getPivotToggleProps, {
            instance: getInstance(),
            header
          });
        });
        var getAutoResetPivot = useGetLatest(autoResetPivot);
        useMountedLayoutEffect(function() {
          if (getAutoResetPivot()) {
            dispatch({
              type: actions.resetPivot
            });
          }
        }, [dispatch, manaulPivot ? null : columns]);
        Object.assign(instance, {
          togglePivot
        });
      }
      function prepareRow$2(row) {
        row.allCells.forEach(function(cell) {
          cell.isPivoted = cell.column.isPivoted;
        });
      }
      var pluginName$1 = "useRowSelect";
      actions.resetSelectedRows = "resetSelectedRows";
      actions.toggleAllRowsSelected = "toggleAllRowsSelected";
      actions.toggleRowSelected = "toggleRowSelected";
      actions.toggleAllPageRowsSelected = "toggleAllPageRowsSelected";
      var useRowSelect = function useRowSelect2(hooks) {
        hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps];
        hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps];
        hooks.getToggleAllPageRowsSelectedProps = [defaultGetToggleAllPageRowsSelectedProps];
        hooks.stateReducers.push(reducer$8);
        hooks.useInstance.push(useInstance$8);
        hooks.prepareRow.push(prepareRow$3);
      };
      useRowSelect.pluginName = pluginName$1;
      var defaultGetToggleRowSelectedProps = function defaultGetToggleRowSelectedProps2(props, _ref) {
        var instance = _ref.instance, row = _ref.row;
        var _instance$manualRowSe = instance.manualRowSelectedKey, manualRowSelectedKey = _instance$manualRowSe === void 0 ? "isSelected" : _instance$manualRowSe;
        var checked = false;
        if (row.original && row.original[manualRowSelectedKey]) {
          checked = true;
        } else {
          checked = row.isSelected;
        }
        return [props, {
          onChange: function onChange(e) {
            row.toggleRowSelected(e.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked,
          title: "Toggle Row Selected",
          indeterminate: row.isSomeSelected
        }];
      };
      var defaultGetToggleAllRowsSelectedProps = function defaultGetToggleAllRowsSelectedProps2(props, _ref2) {
        var instance = _ref2.instance;
        return [props, {
          onChange: function onChange(e) {
            instance.toggleAllRowsSelected(e.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: instance.isAllRowsSelected,
          title: "Toggle All Rows Selected",
          indeterminate: Boolean(!instance.isAllRowsSelected && Object.keys(instance.state.selectedRowIds).length)
        }];
      };
      var defaultGetToggleAllPageRowsSelectedProps = function defaultGetToggleAllPageRowsSelectedProps2(props, _ref3) {
        var instance = _ref3.instance;
        return [props, {
          onChange: function onChange(e) {
            instance.toggleAllPageRowsSelected(e.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: instance.isAllPageRowsSelected,
          title: "Toggle All Current Page Rows Selected",
          indeterminate: Boolean(!instance.isAllPageRowsSelected && instance.page.some(function(_ref4) {
            var id = _ref4.id;
            return instance.state.selectedRowIds[id];
          }))
        }];
      };
      function reducer$8(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            selectedRowIds: {}
          }, state);
        }
        if (action.type === actions.resetSelectedRows) {
          return _extends({}, state, {
            selectedRowIds: instance.initialState.selectedRowIds || {}
          });
        }
        if (action.type === actions.toggleAllRowsSelected) {
          var setSelected = action.value;
          var isAllRowsSelected = instance.isAllRowsSelected, rowsById = instance.rowsById, _instance$nonGroupedR = instance.nonGroupedRowsById, nonGroupedRowsById = _instance$nonGroupedR === void 0 ? rowsById : _instance$nonGroupedR;
          var selectAll = typeof setSelected !== "undefined" ? setSelected : !isAllRowsSelected;
          var selectedRowIds = Object.assign({}, state.selectedRowIds);
          if (selectAll) {
            Object.keys(nonGroupedRowsById).forEach(function(rowId) {
              selectedRowIds[rowId] = true;
            });
          } else {
            Object.keys(nonGroupedRowsById).forEach(function(rowId) {
              delete selectedRowIds[rowId];
            });
          }
          return _extends({}, state, {
            selectedRowIds
          });
        }
        if (action.type === actions.toggleRowSelected) {
          var id = action.id, _setSelected = action.value;
          var _rowsById = instance.rowsById, _instance$selectSubRo = instance.selectSubRows, selectSubRows = _instance$selectSubRo === void 0 ? true : _instance$selectSubRo, getSubRows = instance.getSubRows;
          var isSelected = state.selectedRowIds[id];
          var shouldExist = typeof _setSelected !== "undefined" ? _setSelected : !isSelected;
          if (isSelected === shouldExist) {
            return state;
          }
          var newSelectedRowIds = _extends({}, state.selectedRowIds);
          var handleRowById = function handleRowById2(id2) {
            var row = _rowsById[id2];
            if (row) {
              if (!row.isGrouped) {
                if (shouldExist) {
                  newSelectedRowIds[id2] = true;
                } else {
                  delete newSelectedRowIds[id2];
                }
              }
              if (selectSubRows && getSubRows(row)) {
                return getSubRows(row).forEach(function(row2) {
                  return handleRowById2(row2.id);
                });
              }
            }
          };
          handleRowById(id);
          return _extends({}, state, {
            selectedRowIds: newSelectedRowIds
          });
        }
        if (action.type === actions.toggleAllPageRowsSelected) {
          var _setSelected2 = action.value;
          var page = instance.page, _rowsById2 = instance.rowsById, _instance$selectSubRo2 = instance.selectSubRows, _selectSubRows = _instance$selectSubRo2 === void 0 ? true : _instance$selectSubRo2, isAllPageRowsSelected = instance.isAllPageRowsSelected, _getSubRows = instance.getSubRows;
          var _selectAll = typeof _setSelected2 !== "undefined" ? _setSelected2 : !isAllPageRowsSelected;
          var _newSelectedRowIds = _extends({}, state.selectedRowIds);
          var _handleRowById = function _handleRowById2(id2) {
            var row = _rowsById2[id2];
            if (!row.isGrouped) {
              if (_selectAll) {
                _newSelectedRowIds[id2] = true;
              } else {
                delete _newSelectedRowIds[id2];
              }
            }
            if (_selectSubRows && _getSubRows(row)) {
              return _getSubRows(row).forEach(function(row2) {
                return _handleRowById2(row2.id);
              });
            }
          };
          page.forEach(function(row) {
            return _handleRowById(row.id);
          });
          return _extends({}, state, {
            selectedRowIds: _newSelectedRowIds
          });
        }
        return state;
      }
      function useInstance$8(instance) {
        var data = instance.data, rows = instance.rows, getHooks = instance.getHooks, plugins = instance.plugins, rowsById = instance.rowsById, _instance$nonGroupedR2 = instance.nonGroupedRowsById, nonGroupedRowsById = _instance$nonGroupedR2 === void 0 ? rowsById : _instance$nonGroupedR2, _instance$autoResetSe = instance.autoResetSelectedRows, autoResetSelectedRows = _instance$autoResetSe === void 0 ? true : _instance$autoResetSe, selectedRowIds = instance.state.selectedRowIds, _instance$selectSubRo3 = instance.selectSubRows, selectSubRows = _instance$selectSubRo3 === void 0 ? true : _instance$selectSubRo3, dispatch = instance.dispatch, page = instance.page, getSubRows = instance.getSubRows;
        ensurePluginOrder(plugins, ["useFilters", "useGroupBy", "useSortBy", "useExpanded", "usePagination"], "useRowSelect");
        var selectedFlatRows = React.useMemo(function() {
          var selectedFlatRows2 = [];
          rows.forEach(function(row) {
            var isSelected = selectSubRows ? getRowIsSelected(row, selectedRowIds, getSubRows) : !!selectedRowIds[row.id];
            row.isSelected = !!isSelected;
            row.isSomeSelected = isSelected === null;
            if (isSelected) {
              selectedFlatRows2.push(row);
            }
          });
          return selectedFlatRows2;
        }, [rows, selectSubRows, selectedRowIds, getSubRows]);
        var isAllRowsSelected = Boolean(Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length);
        var isAllPageRowsSelected = isAllRowsSelected;
        if (isAllRowsSelected) {
          if (Object.keys(nonGroupedRowsById).some(function(id) {
            return !selectedRowIds[id];
          })) {
            isAllRowsSelected = false;
          }
        }
        if (!isAllRowsSelected) {
          if (page && page.length && page.some(function(_ref5) {
            var id = _ref5.id;
            return !selectedRowIds[id];
          })) {
            isAllPageRowsSelected = false;
          }
        }
        var getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows);
        useMountedLayoutEffect(function() {
          if (getAutoResetSelectedRows()) {
            dispatch({
              type: actions.resetSelectedRows
            });
          }
        }, [dispatch, data]);
        var toggleAllRowsSelected = React.useCallback(function(value) {
          return dispatch({
            type: actions.toggleAllRowsSelected,
            value
          });
        }, [dispatch]);
        var toggleAllPageRowsSelected = React.useCallback(function(value) {
          return dispatch({
            type: actions.toggleAllPageRowsSelected,
            value
          });
        }, [dispatch]);
        var toggleRowSelected = React.useCallback(function(id, value) {
          return dispatch({
            type: actions.toggleRowSelected,
            id,
            value
          });
        }, [dispatch]);
        var getInstance = useGetLatest(instance);
        var getToggleAllRowsSelectedProps = makePropGetter(getHooks().getToggleAllRowsSelectedProps, {
          instance: getInstance()
        });
        var getToggleAllPageRowsSelectedProps = makePropGetter(getHooks().getToggleAllPageRowsSelectedProps, {
          instance: getInstance()
        });
        Object.assign(instance, {
          selectedFlatRows,
          isAllRowsSelected,
          isAllPageRowsSelected,
          toggleRowSelected,
          toggleAllRowsSelected,
          getToggleAllRowsSelectedProps,
          getToggleAllPageRowsSelectedProps,
          toggleAllPageRowsSelected
        });
      }
      function prepareRow$3(row, _ref6) {
        var instance = _ref6.instance;
        row.toggleRowSelected = function(set) {
          return instance.toggleRowSelected(row.id, set);
        };
        row.getToggleRowSelectedProps = makePropGetter(instance.getHooks().getToggleRowSelectedProps, {
          instance,
          row
        });
      }
      function getRowIsSelected(row, selectedRowIds, getSubRows) {
        if (selectedRowIds[row.id]) {
          return true;
        }
        var subRows = getSubRows(row);
        if (subRows && subRows.length) {
          var allChildrenSelected = true;
          var someSelected = false;
          subRows.forEach(function(subRow) {
            if (someSelected && !allChildrenSelected) {
              return;
            }
            if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {
              someSelected = true;
            } else {
              allChildrenSelected = false;
            }
          });
          return allChildrenSelected ? true : someSelected ? null : false;
        }
        return false;
      }
      var defaultInitialRowStateAccessor = function defaultInitialRowStateAccessor2(row) {
        return {};
      };
      var defaultInitialCellStateAccessor = function defaultInitialCellStateAccessor2(cell) {
        return {};
      };
      actions.setRowState = "setRowState";
      actions.setCellState = "setCellState";
      actions.resetRowState = "resetRowState";
      var useRowState = function useRowState2(hooks) {
        hooks.stateReducers.push(reducer$9);
        hooks.useInstance.push(useInstance$9);
        hooks.prepareRow.push(prepareRow$4);
      };
      useRowState.pluginName = "useRowState";
      function reducer$9(state, action, previousState, instance) {
        var _instance$initialRowS = instance.initialRowStateAccessor, initialRowStateAccessor = _instance$initialRowS === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS, _instance$initialCell = instance.initialCellStateAccessor, initialCellStateAccessor = _instance$initialCell === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell, rowsById = instance.rowsById;
        if (action.type === actions.init) {
          return _extends({
            rowState: {}
          }, state);
        }
        if (action.type === actions.resetRowState) {
          return _extends({}, state, {
            rowState: instance.initialState.rowState || {}
          });
        }
        if (action.type === actions.setRowState) {
          var _extends2;
          var rowId = action.rowId, value = action.value;
          var oldRowState = typeof state.rowState[rowId] !== "undefined" ? state.rowState[rowId] : initialRowStateAccessor(rowsById[rowId]);
          return _extends({}, state, {
            rowState: _extends({}, state.rowState, (_extends2 = {}, _extends2[rowId] = functionalUpdate(value, oldRowState), _extends2))
          });
        }
        if (action.type === actions.setCellState) {
          var _oldRowState$cellStat, _rowsById$_rowId, _rowsById$_rowId$cell, _extends3, _extends4;
          var _rowId = action.rowId, columnId = action.columnId, _value = action.value;
          var _oldRowState = typeof state.rowState[_rowId] !== "undefined" ? state.rowState[_rowId] : initialRowStateAccessor(rowsById[_rowId]);
          var oldCellState = typeof (_oldRowState == null ? void 0 : (_oldRowState$cellStat = _oldRowState.cellState) == null ? void 0 : _oldRowState$cellStat[columnId]) !== "undefined" ? _oldRowState.cellState[columnId] : initialCellStateAccessor((_rowsById$_rowId = rowsById[_rowId]) == null ? void 0 : (_rowsById$_rowId$cell = _rowsById$_rowId.cells) == null ? void 0 : _rowsById$_rowId$cell.find(function(cell) {
            return cell.column.id === columnId;
          }));
          return _extends({}, state, {
            rowState: _extends({}, state.rowState, (_extends4 = {}, _extends4[_rowId] = _extends({}, _oldRowState, {
              cellState: _extends({}, _oldRowState.cellState || {}, (_extends3 = {}, _extends3[columnId] = functionalUpdate(_value, oldCellState), _extends3))
            }), _extends4))
          });
        }
      }
      function useInstance$9(instance) {
        var _instance$autoResetRo = instance.autoResetRowState, autoResetRowState = _instance$autoResetRo === void 0 ? true : _instance$autoResetRo, data = instance.data, dispatch = instance.dispatch;
        var setRowState = React.useCallback(function(rowId, value) {
          return dispatch({
            type: actions.setRowState,
            rowId,
            value
          });
        }, [dispatch]);
        var setCellState = React.useCallback(function(rowId, columnId, value) {
          return dispatch({
            type: actions.setCellState,
            rowId,
            columnId,
            value
          });
        }, [dispatch]);
        var getAutoResetRowState = useGetLatest(autoResetRowState);
        useMountedLayoutEffect(function() {
          if (getAutoResetRowState()) {
            dispatch({
              type: actions.resetRowState
            });
          }
        }, [data]);
        Object.assign(instance, {
          setRowState,
          setCellState
        });
      }
      function prepareRow$4(row, _ref) {
        var instance = _ref.instance;
        var _instance$initialRowS2 = instance.initialRowStateAccessor, initialRowStateAccessor = _instance$initialRowS2 === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS2, _instance$initialCell2 = instance.initialCellStateAccessor, initialCellStateAccessor = _instance$initialCell2 === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell2, rowState = instance.state.rowState;
        if (row) {
          row.state = typeof rowState[row.id] !== "undefined" ? rowState[row.id] : initialRowStateAccessor(row);
          row.setState = function(updater) {
            return instance.setRowState(row.id, updater);
          };
          row.cells.forEach(function(cell) {
            if (!row.state.cellState) {
              row.state.cellState = {};
            }
            cell.state = typeof row.state.cellState[cell.column.id] !== "undefined" ? row.state.cellState[cell.column.id] : initialCellStateAccessor(cell);
            cell.setState = function(updater) {
              return instance.setCellState(row.id, cell.column.id, updater);
            };
          });
        }
      }
      actions.resetColumnOrder = "resetColumnOrder";
      actions.setColumnOrder = "setColumnOrder";
      var useColumnOrder = function useColumnOrder2(hooks) {
        hooks.stateReducers.push(reducer$a);
        hooks.visibleColumnsDeps.push(function(deps, _ref) {
          var instance = _ref.instance;
          return [].concat(deps, [instance.state.columnOrder]);
        });
        hooks.visibleColumns.push(visibleColumns$2);
        hooks.useInstance.push(useInstance$a);
      };
      useColumnOrder.pluginName = "useColumnOrder";
      function reducer$a(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            columnOrder: []
          }, state);
        }
        if (action.type === actions.resetColumnOrder) {
          return _extends({}, state, {
            columnOrder: instance.initialState.columnOrder || []
          });
        }
        if (action.type === actions.setColumnOrder) {
          return _extends({}, state, {
            columnOrder: functionalUpdate(action.columnOrder, state.columnOrder)
          });
        }
      }
      function visibleColumns$2(columns, _ref2) {
        var columnOrder = _ref2.instance.state.columnOrder;
        if (!columnOrder || !columnOrder.length) {
          return columns;
        }
        var columnOrderCopy = [].concat(columnOrder);
        var columnsCopy = [].concat(columns);
        var columnsInOrder = [];
        var _loop = function _loop2() {
          var targetColumnId = columnOrderCopy.shift();
          var foundIndex = columnsCopy.findIndex(function(d) {
            return d.id === targetColumnId;
          });
          if (foundIndex > -1) {
            columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0]);
          }
        };
        while (columnsCopy.length && columnOrderCopy.length) {
          _loop();
        }
        return [].concat(columnsInOrder, columnsCopy);
      }
      function useInstance$a(instance) {
        var dispatch = instance.dispatch;
        instance.setColumnOrder = React.useCallback(function(columnOrder) {
          return dispatch({
            type: actions.setColumnOrder,
            columnOrder
          });
        }, [dispatch]);
      }
      defaultColumn.canResize = true;
      actions.columnStartResizing = "columnStartResizing";
      actions.columnResizing = "columnResizing";
      actions.columnDoneResizing = "columnDoneResizing";
      actions.resetResize = "resetResize";
      var useResizeColumns = function useResizeColumns2(hooks) {
        hooks.getResizerProps = [defaultGetResizerProps];
        hooks.getHeaderProps.push({
          style: {
            position: "relative"
          }
        });
        hooks.stateReducers.push(reducer$b);
        hooks.useInstance.push(useInstance$b);
        hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions$1);
      };
      var defaultGetResizerProps = function defaultGetResizerProps2(props, _ref) {
        var instance = _ref.instance, header = _ref.header;
        var dispatch = instance.dispatch;
        var onResizeStart = function onResizeStart2(e, header2) {
          var isTouchEvent = false;
          if (e.type === "touchstart") {
            if (e.touches && e.touches.length > 1) {
              return;
            }
            isTouchEvent = true;
          }
          var headersToResize = getLeafHeaders(header2);
          var headerIdWidths = headersToResize.map(function(d) {
            return [d.id, d.totalWidth];
          });
          var clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX;
          var raf;
          var mostRecentClientX;
          var dispatchEnd = function dispatchEnd2() {
            window.cancelAnimationFrame(raf);
            raf = null;
            dispatch({
              type: actions.columnDoneResizing
            });
          };
          var dispatchMove = function dispatchMove2() {
            window.cancelAnimationFrame(raf);
            raf = null;
            dispatch({
              type: actions.columnResizing,
              clientX: mostRecentClientX
            });
          };
          var scheduleDispatchMoveOnNextAnimationFrame = function scheduleDispatchMoveOnNextAnimationFrame2(clientXPos) {
            mostRecentClientX = clientXPos;
            if (!raf) {
              raf = window.requestAnimationFrame(dispatchMove);
            }
          };
          var handlersAndEvents = {
            mouse: {
              moveEvent: "mousemove",
              moveHandler: function moveHandler(e2) {
                return scheduleDispatchMoveOnNextAnimationFrame(e2.clientX);
              },
              upEvent: "mouseup",
              upHandler: function upHandler(e2) {
                document.removeEventListener("mousemove", handlersAndEvents.mouse.moveHandler);
                document.removeEventListener("mouseup", handlersAndEvents.mouse.upHandler);
                dispatchEnd();
              }
            },
            touch: {
              moveEvent: "touchmove",
              moveHandler: function moveHandler(e2) {
                if (e2.cancelable) {
                  e2.preventDefault();
                  e2.stopPropagation();
                }
                scheduleDispatchMoveOnNextAnimationFrame(e2.touches[0].clientX);
                return false;
              },
              upEvent: "touchend",
              upHandler: function upHandler(e2) {
                document.removeEventListener(handlersAndEvents.touch.moveEvent, handlersAndEvents.touch.moveHandler);
                document.removeEventListener(handlersAndEvents.touch.upEvent, handlersAndEvents.touch.moveHandler);
                dispatchEnd();
              }
            }
          };
          var events = isTouchEvent ? handlersAndEvents.touch : handlersAndEvents.mouse;
          var passiveIfSupported = passiveEventSupported() ? {
            passive: false
          } : false;
          document.addEventListener(events.moveEvent, events.moveHandler, passiveIfSupported);
          document.addEventListener(events.upEvent, events.upHandler, passiveIfSupported);
          dispatch({
            type: actions.columnStartResizing,
            columnId: header2.id,
            columnWidth: header2.totalWidth,
            headerIdWidths,
            clientX
          });
        };
        return [props, {
          onMouseDown: function onMouseDown(e) {
            return e.persist() || onResizeStart(e, header);
          },
          onTouchStart: function onTouchStart(e) {
            return e.persist() || onResizeStart(e, header);
          },
          style: {
            cursor: "col-resize"
          },
          draggable: false,
          role: "separator"
        }];
      };
      useResizeColumns.pluginName = "useResizeColumns";
      function reducer$b(state, action) {
        if (action.type === actions.init) {
          return _extends({
            columnResizing: {
              columnWidths: {}
            }
          }, state);
        }
        if (action.type === actions.resetResize) {
          return _extends({}, state, {
            columnResizing: {
              columnWidths: {}
            }
          });
        }
        if (action.type === actions.columnStartResizing) {
          var clientX = action.clientX, columnId = action.columnId, columnWidth = action.columnWidth, headerIdWidths = action.headerIdWidths;
          return _extends({}, state, {
            columnResizing: _extends({}, state.columnResizing, {
              startX: clientX,
              headerIdWidths,
              columnWidth,
              isResizingColumn: columnId
            })
          });
        }
        if (action.type === actions.columnResizing) {
          var _clientX = action.clientX;
          var _state$columnResizing = state.columnResizing, startX = _state$columnResizing.startX, _columnWidth = _state$columnResizing.columnWidth, _state$columnResizing2 = _state$columnResizing.headerIdWidths, _headerIdWidths = _state$columnResizing2 === void 0 ? [] : _state$columnResizing2;
          var deltaX = _clientX - startX;
          var percentageDeltaX = deltaX / _columnWidth;
          var newColumnWidths = {};
          _headerIdWidths.forEach(function(_ref2) {
            var headerId = _ref2[0], headerWidth = _ref2[1];
            newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);
          });
          return _extends({}, state, {
            columnResizing: _extends({}, state.columnResizing, {
              columnWidths: _extends({}, state.columnResizing.columnWidths, {}, newColumnWidths)
            })
          });
        }
        if (action.type === actions.columnDoneResizing) {
          return _extends({}, state, {
            columnResizing: _extends({}, state.columnResizing, {
              startX: null,
              isResizingColumn: null
            })
          });
        }
      }
      var useInstanceBeforeDimensions$1 = function useInstanceBeforeDimensions2(instance) {
        var flatHeaders = instance.flatHeaders, disableResizing = instance.disableResizing, getHooks = instance.getHooks, columnResizing = instance.state.columnResizing;
        var getInstance = useGetLatest(instance);
        flatHeaders.forEach(function(header) {
          var canResize = getFirstDefined(header.disableResizing === true ? false : void 0, disableResizing === true ? false : void 0, true);
          header.canResize = canResize;
          header.width = columnResizing.columnWidths[header.id] || header.originalWidth || header.width;
          header.isResizing = columnResizing.isResizingColumn === header.id;
          if (canResize) {
            header.getResizerProps = makePropGetter(getHooks().getResizerProps, {
              instance: getInstance(),
              header
            });
          }
        });
      };
      function useInstance$b(instance) {
        var plugins = instance.plugins, dispatch = instance.dispatch, _instance$autoResetRe = instance.autoResetResize, autoResetResize = _instance$autoResetRe === void 0 ? true : _instance$autoResetRe, columns = instance.columns;
        ensurePluginOrder(plugins, ["useAbsoluteLayout"], "useResizeColumns");
        var getAutoResetResize = useGetLatest(autoResetResize);
        useMountedLayoutEffect(function() {
          if (getAutoResetResize()) {
            dispatch({
              type: actions.resetResize
            });
          }
        }, [columns]);
        var resetResizing = React.useCallback(function() {
          return dispatch({
            type: actions.resetResize
          });
        }, [dispatch]);
        Object.assign(instance, {
          resetResizing
        });
      }
      function getLeafHeaders(header) {
        var leafHeaders = [];
        var recurseHeader = function recurseHeader2(header2) {
          if (header2.columns && header2.columns.length) {
            header2.columns.map(recurseHeader2);
          }
          leafHeaders.push(header2);
        };
        recurseHeader(header);
        return leafHeaders;
      }
      var cellStyles = {
        position: "absolute",
        top: 0
      };
      var useAbsoluteLayout = function useAbsoluteLayout2(hooks) {
        hooks.getTableBodyProps.push(getRowStyles);
        hooks.getRowProps.push(getRowStyles);
        hooks.getHeaderGroupProps.push(getRowStyles);
        hooks.getFooterGroupProps.push(getRowStyles);
        hooks.getHeaderProps.push(function(props, _ref) {
          var column = _ref.column;
          return [props, {
            style: _extends({}, cellStyles, {
              left: column.totalLeft + "px",
              width: column.totalWidth + "px"
            })
          }];
        });
        hooks.getCellProps.push(function(props, _ref2) {
          var cell = _ref2.cell;
          return [props, {
            style: _extends({}, cellStyles, {
              left: cell.column.totalLeft + "px",
              width: cell.column.totalWidth + "px"
            })
          }];
        });
        hooks.getFooterProps.push(function(props, _ref3) {
          var column = _ref3.column;
          return [props, {
            style: _extends({}, cellStyles, {
              left: column.totalLeft + "px",
              width: column.totalWidth + "px"
            })
          }];
        });
      };
      useAbsoluteLayout.pluginName = "useAbsoluteLayout";
      var getRowStyles = function getRowStyles2(props, _ref4) {
        var instance = _ref4.instance;
        return [props, {
          style: {
            position: "relative",
            width: instance.totalColumnsWidth + "px"
          }
        }];
      };
      var cellStyles$1 = {
        display: "inline-block",
        boxSizing: "border-box"
      };
      var getRowStyles$1 = function getRowStyles2(props, _ref) {
        var instance = _ref.instance;
        return [props, {
          style: {
            display: "flex",
            width: instance.totalColumnsWidth + "px"
          }
        }];
      };
      var useBlockLayout = function useBlockLayout2(hooks) {
        hooks.getRowProps.push(getRowStyles$1);
        hooks.getHeaderGroupProps.push(getRowStyles$1);
        hooks.getFooterGroupProps.push(getRowStyles$1);
        hooks.getHeaderProps.push(function(props, _ref2) {
          var column = _ref2.column;
          return [props, {
            style: _extends({}, cellStyles$1, {
              width: column.totalWidth + "px"
            })
          }];
        });
        hooks.getCellProps.push(function(props, _ref3) {
          var cell = _ref3.cell;
          return [props, {
            style: _extends({}, cellStyles$1, {
              width: cell.column.totalWidth + "px"
            })
          }];
        });
        hooks.getFooterProps.push(function(props, _ref4) {
          var column = _ref4.column;
          return [props, {
            style: _extends({}, cellStyles$1, {
              width: column.totalWidth + "px"
            })
          }];
        });
      };
      useBlockLayout.pluginName = "useBlockLayout";
      function useFlexLayout(hooks) {
        hooks.getTableProps.push(getTableProps);
        hooks.getRowProps.push(getRowStyles$2);
        hooks.getHeaderGroupProps.push(getRowStyles$2);
        hooks.getFooterGroupProps.push(getRowStyles$2);
        hooks.getHeaderProps.push(getHeaderProps);
        hooks.getCellProps.push(getCellProps);
        hooks.getFooterProps.push(getFooterProps);
      }
      useFlexLayout.pluginName = "useFlexLayout";
      var getTableProps = function getTableProps2(props, _ref) {
        var instance = _ref.instance;
        return [props, {
          style: {
            minWidth: instance.totalColumnsMinWidth + "px"
          }
        }];
      };
      var getRowStyles$2 = function getRowStyles2(props, _ref2) {
        var instance = _ref2.instance;
        return [props, {
          style: {
            display: "flex",
            flex: "1 0 auto",
            minWidth: instance.totalColumnsMinWidth + "px"
          }
        }];
      };
      var getHeaderProps = function getHeaderProps2(props, _ref3) {
        var column = _ref3.column;
        return [props, {
          style: {
            boxSizing: "border-box",
            flex: column.totalFlexWidth ? column.totalFlexWidth + " 0 auto" : void 0,
            minWidth: column.totalMinWidth + "px",
            width: column.totalWidth + "px"
          }
        }];
      };
      var getCellProps = function getCellProps2(props, _ref4) {
        var cell = _ref4.cell;
        return [props, {
          style: {
            boxSizing: "border-box",
            flex: cell.column.totalFlexWidth + " 0 auto",
            minWidth: cell.column.totalMinWidth + "px",
            width: cell.column.totalWidth + "px"
          }
        }];
      };
      var getFooterProps = function getFooterProps2(props, _ref5) {
        var column = _ref5.column;
        return [props, {
          style: {
            boxSizing: "border-box",
            flex: column.totalFlexWidth ? column.totalFlexWidth + " 0 auto" : void 0,
            minWidth: column.totalMinWidth + "px",
            width: column.totalWidth + "px"
          }
        }];
      };
      actions.columnStartResizing = "columnStartResizing";
      actions.columnResizing = "columnResizing";
      actions.columnDoneResizing = "columnDoneResizing";
      actions.resetResize = "resetResize";
      function useGridLayout(hooks) {
        hooks.stateReducers.push(reducer$c);
        hooks.getTableProps.push(getTableProps$1);
        hooks.getHeaderProps.push(getHeaderProps$1);
        hooks.getRowProps.push(getRowProps);
      }
      useGridLayout.pluginName = "useGridLayout";
      var getTableProps$1 = function getTableProps2(props, _ref) {
        var instance = _ref.instance;
        var gridTemplateColumns = instance.visibleColumns.map(function(column) {
          var _instance$state$colum;
          if (instance.state.gridLayout.columnWidths[column.id]) return instance.state.gridLayout.columnWidths[column.id] + "px";
          if ((_instance$state$colum = instance.state.columnResizing) == null ? void 0 : _instance$state$colum.isResizingColumn) return instance.state.gridLayout.startWidths[column.id] + "px";
          if (typeof column.width === "number") return column.width + "px";
          return column.width;
        });
        return [props, {
          style: {
            display: "grid",
            gridTemplateColumns: gridTemplateColumns.join(" ")
          }
        }];
      };
      var getHeaderProps$1 = function getHeaderProps2(props, _ref2) {
        var column = _ref2.column;
        return [props, {
          id: "header-cell-" + column.id,
          style: {
            position: "sticky",
            //enables a scroll wrapper to be placed around the table and have sticky headers
            gridColumn: "span " + column.totalVisibleHeaderCount
          }
        }];
      };
      var getRowProps = function getRowProps2(props, _ref3) {
        var row = _ref3.row;
        if (row.isExpanded) {
          return [props, {
            style: {
              gridColumn: "1 / " + (row.cells.length + 1)
            }
          }];
        }
        return [props, {}];
      };
      function reducer$c(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            gridLayout: {
              columnWidths: {}
            }
          }, state);
        }
        if (action.type === actions.resetResize) {
          return _extends({}, state, {
            gridLayout: {
              columnWidths: {}
            }
          });
        }
        if (action.type === actions.columnStartResizing) {
          var columnId = action.columnId, headerIdWidths = action.headerIdWidths;
          var columnWidth = getElementWidth(columnId);
          if (columnWidth !== void 0) {
            var startWidths = instance.visibleColumns.reduce(function(acc, column) {
              var _extends2;
              return _extends({}, acc, (_extends2 = {}, _extends2[column.id] = getElementWidth(column.id), _extends2));
            }, {});
            var minWidths = instance.visibleColumns.reduce(function(acc, column) {
              var _extends3;
              return _extends({}, acc, (_extends3 = {}, _extends3[column.id] = column.minWidth, _extends3));
            }, {});
            var maxWidths = instance.visibleColumns.reduce(function(acc, column) {
              var _extends4;
              return _extends({}, acc, (_extends4 = {}, _extends4[column.id] = column.maxWidth, _extends4));
            }, {});
            var headerIdGridWidths = headerIdWidths.map(function(_ref4) {
              var headerId = _ref4[0];
              return [headerId, getElementWidth(headerId)];
            });
            return _extends({}, state, {
              gridLayout: _extends({}, state.gridLayout, {
                startWidths,
                minWidths,
                maxWidths,
                headerIdGridWidths,
                columnWidth
              })
            });
          } else {
            return state;
          }
        }
        if (action.type === actions.columnResizing) {
          var clientX = action.clientX;
          var startX = state.columnResizing.startX;
          var _state$gridLayout = state.gridLayout, _columnWidth = _state$gridLayout.columnWidth, _minWidths = _state$gridLayout.minWidths, _maxWidths = _state$gridLayout.maxWidths, _state$gridLayout$hea = _state$gridLayout.headerIdGridWidths, _headerIdGridWidths = _state$gridLayout$hea === void 0 ? [] : _state$gridLayout$hea;
          var deltaX = clientX - startX;
          var percentageDeltaX = deltaX / _columnWidth;
          var newColumnWidths = {};
          _headerIdGridWidths.forEach(function(_ref5) {
            var headerId = _ref5[0], headerWidth = _ref5[1];
            newColumnWidths[headerId] = Math.min(Math.max(_minWidths[headerId], headerWidth + headerWidth * percentageDeltaX), _maxWidths[headerId]);
          });
          return _extends({}, state, {
            gridLayout: _extends({}, state.gridLayout, {
              columnWidths: _extends({}, state.gridLayout.columnWidths, {}, newColumnWidths)
            })
          });
        }
        if (action.type === actions.columnDoneResizing) {
          return _extends({}, state, {
            gridLayout: _extends({}, state.gridLayout, {
              startWidths: {},
              minWidths: {},
              maxWidths: {}
            })
          });
        }
      }
      function getElementWidth(columnId) {
        var _document$getElementB;
        var width = (_document$getElementB = document.getElementById("header-cell-" + columnId)) == null ? void 0 : _document$getElementB.offsetWidth;
        if (width !== void 0) {
          return width;
        }
      }
      exports2._UNSTABLE_usePivotColumns = _UNSTABLE_usePivotColumns;
      exports2.actions = actions;
      exports2.defaultColumn = defaultColumn;
      exports2.defaultGroupByFn = defaultGroupByFn;
      exports2.defaultOrderByFn = defaultOrderByFn;
      exports2.defaultRenderer = defaultRenderer;
      exports2.emptyRenderer = emptyRenderer;
      exports2.ensurePluginOrder = ensurePluginOrder;
      exports2.flexRender = flexRender;
      exports2.functionalUpdate = functionalUpdate;
      exports2.loopHooks = loopHooks;
      exports2.makePropGetter = makePropGetter;
      exports2.makeRenderer = makeRenderer;
      exports2.reduceHooks = reduceHooks;
      exports2.safeUseLayoutEffect = safeUseLayoutEffect;
      exports2.useAbsoluteLayout = useAbsoluteLayout;
      exports2.useAsyncDebounce = useAsyncDebounce;
      exports2.useBlockLayout = useBlockLayout;
      exports2.useColumnOrder = useColumnOrder;
      exports2.useExpanded = useExpanded;
      exports2.useFilters = useFilters;
      exports2.useFlexLayout = useFlexLayout;
      exports2.useGetLatest = useGetLatest;
      exports2.useGlobalFilter = useGlobalFilter;
      exports2.useGridLayout = useGridLayout;
      exports2.useGroupBy = useGroupBy;
      exports2.useMountedLayoutEffect = useMountedLayoutEffect;
      exports2.usePagination = usePagination;
      exports2.useResizeColumns = useResizeColumns;
      exports2.useRowSelect = useRowSelect;
      exports2.useRowState = useRowState;
      exports2.useSortBy = useSortBy;
      exports2.useTable = useTable;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/react-table/index.js
var require_react_table = __commonJS({
  "node_modules/react-table/index.js"(exports, module) {
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    if (process.env.NODE_ENV === "production") {
      module.exports = require_react_table_production_min();
    } else {
      module.exports = require_react_table_development();
    }
  }
});
export default require_react_table();
//# sourceMappingURL=react-table.js.map
